<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc compact="yes"?>
<?rfc iprnotified="no" ?>
<?rfc sortrefs="yes"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>

<rfc category="std" ipr="trust200902" docName="draft-ietf-precis-framework-08" obsoletes="3454">

  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <front>
    <title abbrev="PRECIS Framework">PRECIS Framework: Preparation and Comparison of Internationalized Strings in Application Protocols</title>

    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization>Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>1899 Wynkoop Street, Suite 600</street>
          <city>Denver</city>
          <region>CO</region>
          <code>80202</code>
          <country>USA</country>
        </postal>
        <phone>+1-303-308-3282</phone>
        <email>psaintan@cisco.com</email>
      </address>
    </author>

    <author initials="M." surname="Blanchet" fullname="Marc Blanchet">
      <organization>Viagenie</organization>
      <address>
        <postal>
          <street>246 Aberdeen</street>
          <city>Quebec</city>
          <region>QC</region>
          <code>G1R 2E1</code>
          <country>Canada</country>
        </postal>
        <email>Marc.Blanchet@viagenie.ca</email>
        <uri>http://www.viagenie.ca/</uri>
      </address>
    </author>

    <date/>

    <area>Applications</area>
    <workgroup>PRECIS</workgroup>
    <keyword>internationalization</keyword>
    <keyword>i18n</keyword>
    <keyword>Stringprep</keyword>

    <abstract>
      <t>Application protocols using Unicode code points in protocol strings need to properly prepare such strings in order to perform valid comparison operations (e.g., for purposes of authentication or authorization).  This document defines a framework enabling application protocols to perform the preparation and comparison of internationalized strings (a.k.a. "PRECIS") in a way that depends on the properties of Unicode code points and thus is agile with respect to versions of Unicode.  As a result, this framework provides a more sustainable approach to the handling of internationalized strings than the previous framework, known as Stringprep (RFC 3454).  A specification that reuses this framework can either directly use the PRECIS string classes or subclass the PRECIS string classes as needed.  This framework takes an approach similar to the revised internationalized domain names (IDNs) in applications (IDNA) technology (RFC 5890, RFC 5891, RFC 5892, RFC 5893, RFC 5894) and thus adheres to the high-level design goals described in the IAB's recommendations regarding IDNs (RFC 4690), albeit for application technologies other than the Domain Name System (DNS).  This document obsoletes RFC 3454.</t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction" anchor='intro'>
      <t>As described in the problem statement for the preparation and comparison of internationalized strings ("PRECIS") <xref target='RFC6885'/>, many IETF protocols have used the Stringprep framework <xref target='RFC3454'/> as the basis for preparing and comparing protocol strings that contain Unicode code points <xref target='UNICODE'/> outside the ASCII range <xref target='RFC20'/>.  The Stringprep framework was developed during work on the original technology for internationalized domain names (IDNs), here called "IDNA2003" <xref target='RFC3490'/>, and Nameprep <xref target="RFC3491"/> was the Stringprep profile for IDNs.  At the time, Stringprep was designed as a general framework so that other application protocols could define their own Stringprep profiles for the preparation and comparison of strings and identifiers.  Indeed, a number of application protocols defined such profiles.</t>
      <t>After the publication of <xref target='RFC3454'/> in 2002, several significant issues arose with the use of Stringprep in the IDN case, as documented in the IAB's recommendations regarding IDNs <xref target='RFC4690'/> (most significantly, Stringprep was tied to Unicode version 3.2).  Therefore, the newer IDNA specifications, here called "IDNA2008" (<xref target='RFC5890'/>, <xref target='RFC5891'/>, <xref target='RFC5892'/>, <xref target='RFC5893'/>, <xref target='RFC5894'/>), no longer use Stringprep and Nameprep.  This migration away from Stringprep for IDNs has prompted other "customers" of Stringprep to consider new approaches to the preparation and comparison of internationalized strings (a.k.a. "PRECIS"), as described in <xref target='RFC6885'/>.</t>
      <t>This document defines a framework for a post-Stringprep approach to the preparation and comparison of internationalized strings in application protocols, based on several principles:</t>
      <t>
        <list style='numbers'>
          <t>Define a small set of string classes appropriate for common application protocol constructs such as usernames and free-form strings.</t>
          <t>Define each PRECIS string class in terms of Unicode code points and their properties so that an algorithm can be used to determine whether each code point or character category is valid, disallowed, or unassigned.</t>
          <t>Define string classes in terms of allowable code points, so that any code point not explicitly allowed is forbidden.</t>
          <t>Enable application protocols to subclass the PRECIS string classes if needed, mainly to disallow particular code points that are currently disallowed in the relevant application protocol (e.g., characters with special or reserved meaning, such as "@" and "/" when used as separators within identifiers).</t>
          <t>Leave various mapping operations (e.g., case preservation or lowercasing, Unicode normalization, mapping of certain characters to other characters or to nothing, handling of full-width and half-width characters, handling of right-to-left characters) as the responsibility of application protocols, as was done for IDNA2008 through an IDNA-specific mapping document <xref target='RFC5895'/>.</t>
        </list>
      </t>
      <t>It is expected that this framework will yield the following benefits:</t>
      <t>
        <list style="symbols">
          <t>Application protocols will be more version-agile with regard to the Unicode database.</t>
          <t>Implementers will be able to share code point tables and software code across application protocols, most likely by means of software libraries.</t>
          <t>End users will be able to acquire more accurate expectations about the code points that are acceptable in various contexts.  Given this more uniform set of string classes, it is also expected that copy/paste operations between software implementing different application protocols will be more predictable and coherent.</t>
        </list>
      </t>
      <t>Although this framework is similar to IDNA2008 and borrows some of the character categories defined in <xref target='RFC5892'/>, it defines additional string classes and character categories to meet the needs of common application protocols.</t>
    </section>

    <section title="Terminology" anchor="terms">
      <t>Many important terms used in this document are defined in <xref target='RFC5890'/>, <xref target='RFC6365'/>, <xref target='RFC6885'/>, and <xref target='UNICODE'/>.</t>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target='RFC2119'/>.</t>
    </section>

    <section title="String Classes" anchor='classes'>

      <section title="Overview" anchor='classes-overview'>
        <t>IDNA2008 essentially defines a string class of internationalized domain name (IDN), although it does not use the term "string class".  (This document does not define a string class for domain names, and application protocols are strongly encouraged to use IDNA2008 as the appropriate method to prepare domain names and hostnames.)  Because the IDN string class is designed to meet the particular requirements of the Domain Name System (DNS), additional string classes are needed for non-DNS applications.</t>
        <t>Starting in 2010, various "customers" of Stringprep began to discuss the need to define a post-Stringprep approach to the preparation and comparison of internationalized strings.  As a result of analyzing existing Stringprep profiles, this community concluded that most existing uses could be addressed by two string classes:</t>
        <t>
          <list style='hanging'>
            <t hangText="IdentifierClass:">a sequence of letters, numbers, and symbols that is used to identify or address a network entity such as a user account, a venue (e.g., a chatroom), an information source (e.g., a data feed), or a collection of data (e.g., a file); the intent is that this class will be very safe for use in a wide variety of application protocols, with the result that safety has been prioritized over inclusiveness for this class.</t>
            <t hangText="FreeformClass:">a sequence of letters, numbers, symbols, spaces, and other code points that is used for free-form strings, including passwords as well as display elements such as human-friendly nicknames in chatrooms; the intent is that this class will allow nearly any Unicode character, with the result that inclusiveness has been prioritized over safety for this class (e.g., protocol designers, application developers, service providers, and end users might not understand or be able to enter all of the characters that can be included in the FreeformClass).</t>
          </list>
        </t>
        <t>Although members of the community discussed the possibility of defining other PRECIS string classes (e.g., a class falling somewhere between the IdentifierClass and the FreeformClass), they concluded that the IdentifierClass would be a safe choice meeting the needs of many or even most application protocols, and that protocols needing a wider range of Unicode characters could use the FreeformClass directly or subclass it if needed.</t>
        <t>The following subsections discuss the IdentifierClass and FreeformClass in more detail, with reference to the dimensions described in Section 3 of <xref target='RFC6885'/>.  (Naturally, future documents can define PRECIS string classes beyond the IdentifierClass and FreeformClass; see <xref target='iana-classes'/>.)  Each string class (or a particular usage thereof) is defined by the following behavioral rules:</t>
        <t>
          <list style='hanging'>
            <t hangText='Valid:'>defines which code points and character categories are treated as valid input to the string.</t>
            <t hangText='Disallowed:'>defines which code points and character categories are treated as disallowed for the string.</t>
            <t hangText='Unassigned:'>defines application behavior in the presence of code points that are unassigned, i.e. unknown for the version of Unicode the application is built upon.</t>
            <t hangText='Width Mapping:'>specifies if width mapping is performed on fullwidth and halfwidth characters, and how the mapping is done (e.g., mapping fullwidth and halfwidth characters to their decomposition equivalents).</t>
            <t hangText='Additional Mappings:'>specifies whether additional mappings are to be applied, such as mapping of delimiter characters, mapping of special characters (e.g., non-ASCII space characters to ASCII space or certain characters to nothing), and case mapping based on language and local context (see <xref target='I-D.ietf-precis-mappings'/>).</t>
            <t hangText='Case Mapping:'>specifies if case mapping is performed (instead of case preservation) on uppercase and titlecase characters, and how the mapping is done (e.g., mapping uppercase and titlecase characters to their lowercase equivalents).</t>
            <t hangText='Normalization:'>defines which Unicode normalization form (D, KD, C, or KC) is to be applied (see <xref target='UAX15'/>).</t>
            <t hangText='Directionality:'>defines application behavior in the presence of code points that have directionality, in particular right-to-left code points as defined in the Unicode database (see <xref target='UAX9'/>).</t>
          </list>
        </t>
        <t>This document defines the valid, disallowed, and unassigned rules for the IdentifierClass and FreeformClass.  Application protocols that use these string classes are responsible for defining the normalization, case mapping, width mapping, and directionality rules, as well as any additional mappings to be applied</t>
      </section>

      <section title="Order of Operations" anchor="classes-order">
        <t>To ensure proper comparison, the following order of operations is REQUIRED:</t>
        <t>
          <list style='numbers'>
            <t>Width mapping</t>
            <t>Additional mappings as specified in <xref target='I-D.ietf-precis-mappings'/>:
              <list style='numbers'>
                <t>Delimiter mapping</t>
                <t>Special mapping</t>
                <t>Local case mapping</t>
              </list>
            </t>
            <t>Non-local case mapping</t>
            <t>Normalization</t>
            <t>PRECIS protocol</t>
          </list>
        </t>
      </section>

      <section title="IdentifierClass" anchor="classes-name">
        <t>Most application technologies need strings that can be used to refer to, include, or communicate protocol strings like usernames, file names, data feed identifiers, and chatroom names.  We group such strings into a class called "IdentifierClass" having the following features.</t>
        <section title='Valid' anchor='classes-name-valid'>
          <t>
            <list style='symbols'>
              <t>Code points traditionally used as letters and numbers in writing systems, i.e., the LetterDigits ("A") category first defined in <xref target='RFC5892'/> and listed here under <xref target='A'/>.</t>
              <t>Code points in the range U+0021 through U+007E, i.e., the ASCII7 ("K") rule defined under <xref target='K'/>.  These code points are "grandfathered" into PRECIS and thus are valid even if they would otherwise be disallowed according to the property-based rules specified in the next section.</t>
            </list>
          </t>
          <t>Although the PRECIS IdentifierClass re-uses the LetterDigits category from IDNA2008, the range of characters allowed in the IdentifierClass is wider than the range of characters allowed in IDNA2008.  The main reason is that IDNA2008 applies the Unstable category before the LetterDigits category, thus disallowing uppercase characters, whereas the IdentifierClass does not apply the Unstable category.</t>
        </section>
        <section title='Disallowed' anchor='classes-name-disallowed'>
          <t>
            <list style='symbols'>
              <t>Control characters, i.e., the Controls ("L") category defined under <xref target='L'/>.</t>
              <t>Ignorable characters, i.e., the PrecisIgnorableProperties ("M") category defined under <xref target='M'/>.</t>
              <t>Space characters, i.e., the Spaces ("N") category defined under <xref target='N'/>.</t>
              <t>Symbol characters, i.e., the Symbols ("O") category defined under <xref target='O'/>.</t>
              <t>Punctuation characters, i.e., the Punctuation ("P") category defined under <xref target='P'/>.</t>
              <t>Any character that has a compatibility equivalent, i.e., the HasCompat ("Q") category defined under <xref target='Q'/>.  These code points are disallowed even if they would otherwise be valid according to the property-based rules specified in the previous section.</t>
              <t>Letters and digits other than the "traditional" letters and digits allowed in IDNs, i.e., the OtherLetterDigits ("R") category defined under <xref target='R'/>.</t>
            </list>
          </t>
        </section>
        <section title='Unassigned' anchor='classes-name-unassigned'>
          <t>Any code points that are not yet assigned in the Unicode character set SHALL be considered Unassigned for purposes of the IdentifierClass.</t>
        </section>
        <section title='Width Mapping' anchor='classes-name-widthmapping'>
          <t>The width mapping rule MUST be specified by each application protocol that uses or subclasses the IdentifierClass.</t>
        </section>
        <section title='Additional Mappings' anchor='classes-name-othermapping'>
          <t>Additional mapping rules (if any) MUST be specified by each application protocol that uses or subclasses the IdentifierClass (see <xref target='I-D.ietf-precis-mappings'/>).</t>
        </section>
        <section title='Case Mapping' anchor='classes-name-casemapping'>
          <t>The case mapping rule MUST be specified by each application protocol that uses or subclasses the IdentifierClass.</t>
        </section>
        <section title='Normalization' anchor='classes-name-normalization'>
          <t>The Unicode normalization form MUST be specified by each application protocol that uses or subclasses the IdentifierClass.</t>
          <t>However, in accordance with <xref target='RFC5198'/>, normalization form C (NFC) is RECOMMENDED.</t>
        </section>
        <section title='Directionality' anchor='classes-name-directionality'>
          <t>The directionality rule MUST be specified by each application protocol that uses or subclasses the IdentifierClass.</t>
        </section>
      </section>

      <section title="FreeformClass" anchor="classes-free">
        <t>Some application technologies need strings that can be used in a free-form way, e.g., as a password in an authentication exchange (see <xref target='I-D.ietf-precis-saslprepbis'/> or a nickname in a chatroom (see <xref target='I-D.ietf-precis-nickname'/>).  We group such things into a class called "FreeformClass" having the following features.</t>
        <t>Note: Consult <xref target='security-passwords'/> for relevant security considerations when strings conforming to the FreeformClass, or a subclass thereof, are used as passwords.</t>
        <section title='Valid' anchor='classes-free-valid'>
          <t>
            <list style='symbols'>
              <t>Traditional letters and numbers, i.e., the LetterDigits ("A") category first defined in <xref target='RFC5892'/> and listed here under <xref target='A'/>.</t>
              <t>Letters and digits other than the "traditional" letters and digits allowed in IDNs, i.e., the OtherLetterDigits ("R") category defined under <xref target='R'/>.</t>
              <t>Code points in the range U+0021 through U+007E, i.e., the ASCII7 ("K") rule defined under <xref target='K'/>.</t>
              <t>Any character that has a compatibility equivalent, i.e., the HasCompat ("Q") category defined under <xref target='Q'/>.</t>
              <t>Space characters, i.e., the Spaces ("N") category defined under <xref target='N'/>.</t>
              <t>Symbol characters, i.e., the Symbols ("O") category defined under <xref target='O'/>.</t>
              <t>Punctuation characters, i.e., the Punctuation ("P") category defined under <xref target='P'/>.</t>
            </list>
          </t>
        </section>
        <section title='Disallowed' anchor='classes-free-disallowed'>
          <t>
            <list style='symbols'>
              <t>Control characters, i.e., the Controls ("L") category defined under <xref target='L'/>.</t>
              <t>Ignorable characters, i.e., the PrecisIgnorableProperties ("M") category defined under <xref target='M'/>.</t>
            </list>
          </t>
        </section>
        <section title='Unassigned' anchor='classes-free-unassigned'>
          <t>Any code points that are not yet assigned in the Unicode character set SHALL be considered Unassigned for purposes of the FreeformClass.</t>
        </section>
        <section title='Width Mapping' anchor='classes-free-widthmapping'>
          <t>The width mapping rule MUST be specified by each application protocol that uses or subclasses the FreeformClass.</t>
          <t>Because one aspect of Unicode normalization form KC is width mapping, a PRECIS usage or subclass that uses NFKC does not need to specify width mapping.  However, if NFC is used then the usage or subclass needs to specify whether to apply width mapping; in this case, width mapping is in general RECOMMENDED because allowing fullwidth and halfwidth characters to remain unmapped to their decomposition equivalents would violate the principle of least user surprise.  For more information about the concept of width in East Asian scripts within Unicode, see for instance <xref target='UAX11'/>.</t>
        </section>
        <section title='Additional Mappings' anchor='classes-free-othermapping'>
          <t>Additional mapping rules (if any) MUST be specified by each application protocol that uses or subclasses the FreeformClass (see <xref target='I-D.ietf-precis-mappings'/>).</t>
        </section>
        <section title='Case Mapping' anchor='classes-free-casemapping'>
          <t>The case mapping rule MUST be specified by each application protocol that uses or subclasses the FreeformClass.</t>
          <t>In general, the combination of case preservation and case-insensitive comparison of internationalized strings is NOT RECOMMENDED; instead, application protocols SHOULD either (a) not preserve case but perform case-insensitive comparison or (b) preserve case but perform case-sensitive comparison.</t>
          <t>In order to maximize entropy and minimize the potential for false positives, it is NOT RECOMMENDED for application protocols to map uppercase and titlecase code points to their lowercase equivalents when strings conforming to the FreeformClass, or a subclass thereof, are used in passwords; instead, it is RECOMMENDED to preserve the case of all code points contained in such strings and then perform case-sensitive comparison.  See also the related discussion in <xref target='I-D.ietf-precis-saslprepbis'/>.</t>
        </section>
        <section title='Normalization' anchor='classes-free-normalization'>
          <t>The Unicode normalization form MUST be specified by each application protocol that uses or subclasses the FreeformClass.</t>
          <t>However, in accordance with <xref target='RFC5198'/>, normalization form C (NFC) is RECOMMENDED.</t>
        </section>
        <section title='Directionality' anchor='classes-free-directionality'>
          <t>The directionality rule MUST be specified by each application protocol that uses or subclasses the FreeformClass.</t>
        </section>
      </section>
    </section>

    <section title="Use of PRECIS String Classes" anchor="use">

      <section title="Principles" anchor="use-principles">
        <t>This document defines the valid, disallowed, and unassigned rules.  Application protocols that use the PRECIS string classes MUST define the width mapping, additional mapping (if any), case mapping, normalization, and directionality rules.  That is, such definitions MUST at a minimum specify the following:</t>
        <t>
          <list style='hanging'>
            <t hangText='Width Mapping:'>Whether fullwidth and halfwidth code points are to be mapped to their decomposition equivalents.</t>
            <t hangText='Additional Mappings:'>Whether additional mappings are to be applied, such as mapping of delimiter characters, mapping of special characters (e.g., non-ASCII space characters to ASCII space or certain characters to nothing), and case mapping based on language and local context (see <xref target='I-D.ietf-precis-mappings'/>).</t>
            <t hangText='Case Mapping:'>Whether uppercase and titlecase code points are to be (a) preserved or (b) mapped to lowercase.</t>
            <t hangText='Normalization:'>Which Unicode normalization form (D, KD, C, or KC) is to be applied (see <xref target='UAX15'/> for background information); in accordance with <xref target='RFC5198'/>, NFC is RECOMMENDED.</t>
            <t hangText='Directionality:'>Whether any instance of the class that contains a right-to-left code point is to be considered a right-to-left string, or whether some other rule is to be applied (e.g., the "Bidi Rule" from <xref target='RFC5893'/>).</t>
          </list>
        </t>
      </section>

      <section title="Subclassing" anchor="use-subclassing">
        <t>Application protocols are allowed to subclass the PRECIS string classes specified in this document.  As the word "subclass" implies, a subclass MUST NOT add as valid any code points or character categories that are disallowed by the relevant PRECIS string class.  However, a subclass MAY do either of the following:</t>
        <t>
          <list style='numbers'>
            <t>Exclude specific code points that are included in the relevant PRECIS string class.</t>
            <t>Exclude characters matching certain Unicode properties (e.g., math symbols) that are included in the relevant PRECIS string class.</t>
          </list>
        </t>
        <t>As a result, code points that are defined as valid for the PRECIS string class being subclassed will be defined as disallowed for the subclass.</t>
        <t>Application protocols that subclass the PRECIS string classes MUST register with the IANA as described under <xref target='iana-subclasses'/>.</t>
        <t>It is RECOMMENDED for subclass names to be of the form "SubclassBaseClass", where the "Subclass" string is a differentiator and "BaseClass" is the name of the PRECIS string class being subclassed; for example, the subclass of the IdentifierClass used for localparts in the Extensible Messaging and Presence Protocol (XMPP) is named "LocalpartIdentifierClass" <xref target='I-D.ietf-xmpp-6122bis'/>.</t>
      </section>

      <section title="Building Application-Layer Constructs" anchor="use-build">
        <t>Sometimes, an application-layer construct does not map directly to one of the PRECIS string classes.  Consider, for example, the "simple user name" construct in the Simple Authentication and Security Layer (SASL) <xref target='RFC4422'/>.  Depending on the deployment, a simple user name might take the form of a user's full name (e.g., the user's personal name followed by a space and then the user's family name).  Such a simple user name cannot be defined as an instance of the IdentifierClass, since space characters are not allowed in the IdentifierClass; however, it could be defined using a space-separated sequence of IdentifierClass instances, as in the following pseudo-ABNF <xref target='RFC5234'/>:</t>
        <figure>
          <artwork><![CDATA[
   fullname = namepart [1*(1*SP namepart)]
   namepart = 1*(idpoint)
              ;
              ; an "idpoint" is a UTF-8 encoded Unicode code point
              ; that conforms to the PRECIS IdentifierClass
          ]]></artwork>
        </figure>
        <t>Similar techniques could be used to define many application-layer constructs, say of the form "user@domain" or "/path/to/file".</t>
      </section>

      <section title="A Note about Spaces" anchor="use-space">
        <t>With regard to the IdentiferClass, the consensus of the PRECIS Working Group was that spaces are problematic for many reasons, including:</t>
        <t>
          <list style='symbols'>
            <t>Many Unicode characters are confusable with ASCII space.</t>
            <t>Even if non-ASCII space characters are mapped to ASCII space (U+0020), space characters are often not rendered in user interfaces, leading to the possibility that human user might consider a string containing spaces to be equivalent to the same string without spaces.</t>
            <t>In some locales, some devices are known to generate a character other than ASCII space (such as ZERO WIDTH JOINER, U+200D) when a user performs an action like hit the space bar on a keyboard.</t>
          </list>
        </t>
        <t>One consequence of disallowing space characters in the IdentifierClass might be to effectively discourage the use of ASCII space (or, even more problematically, non-ASCII space characters) within identifiers created in newer application protocols; given the challenges involved in properly handling space characters in identifiers and other protocol strings, the Working Group considered this to be a feature, not a bug.</t>
        <t>However, the FreeformClass does allow spaces, which enables application protocols to define subclasses of the FreeformClass that are more flexible than any profiles of the IdentifierClass.</t>
      </section>
    </section>

    <section title="Code Point Properties">
      <t>In order to implement the string classes described above, this document does the following:</t>
      <t>
        <list style='numbers'>
          <t>Reviews and classifies the collections of code points in the Unicode character set by examining various code point properties.</t>
          <t>Defines an algorithm for determining a derived property value, which can vary depending on the string class being used by the relevant application protocol.</t>
         </list>
       </t>
      <t>This document is not intended to specify precisely how derived property values are to be applied in protocol strings.  That information is the responsibility of the protocol specification that uses or subclasses a PRECIS string class from this document.</t>
      <t>The value of the property is to be interpreted as follows.</t> 
      <t>
        <list style="hanging">
          <t hangText='PROTOCOL VALID'>Those code points that are allowed to be used in any PRECIS string class (IdentifierClass and FreeformClass).  Code points with this property value are permitted for general use in any string class.  The abbreviated term PVALID is used to refer to this value in the remainder of this document.</t>
          <t hangText='SPECIFIC CLASS PROTOCOL VALID'>Those code points that are allowed to be used in specific string classes. Code points with this property value are permitted for use in specific string classes.  In the remainder of this document, the abbreviated term *_PVAL is used, where * = (NAME | FREE), i.e., either FREE_PVAL or SAFE_PVAL.</t>
          <t hangText='CONTEXTUAL RULE REQUIRED'>Some characteristics of the character, such as its being invisible in certain contexts or problematic in others, require that it not be used in labels unless specific other characters or properties are present.  The abbreviated term CONTEXT is used to refer to this value in the remainder of this document.  As in IDNA2008, there are two subdivisions of CONTEXTUAL RULE REQUIRED, the first for Join_controls (called CONTEXTJ) and the second for other characters (called CONTEXTO).</t>
          <t hangText='DISALLOWED'>Those code points that must not permitted in any PRECIS string class.</t>
          <t hangText='SPECIFIC CLASS DISALLOWED'>Those code points that are not to be included in a specific string class.  Code points with this property value are not permitted in one of the string classes but might be permitted in others.  In the remainder of this document, the abbreviated term *_DIS is used, where * = (NAME | FREE), i.e., either FREE_DIS or SAFE_DIS.</t>
          <t hangText='UNASSIGNED'>Those code points that are not designated (i.e. are unassigned) in the Unicode Standard.</t>
        </list>
      </t>
      <t>The mechanisms described here allow determination of the value of the property for future versions of Unicode (including characters added after Unicode 5.2 or 6.1 depending on the category, since some categories in this document are reused from IDNA2008 and therefore were defined at the time of Unicode 5.2).  Changes in Unicode properties that do not affect the outcome of this process do not affect this framework.  For example, a character can have its Unicode General_Category value <xref target='UNICODE'/> change from So to Sm, or from Lo to Ll, without affecting the algorithm results.  Moreover, even if such changes were to result, the <xref target="G">BackwardCompatible list</xref> can be adjusted to ensure the stability of the results.</t>
      <t>Some code points need to be allowed in exceptional circumstances, but ought to be excluded in all other cases; these rules are also described in other documents.  The most notable of these are the Join Control characters, U+200D ZERO WIDTH JOINER and U+200C ZERO WIDTH NON-JOINER.  Both of them have the derived property value CONTEXTJ.  A character with the derived property value CONTEXTJ or CONTEXTO (CONTEXTUAL RULE REQUIRED) is not to be used unless an appropriate rule has been established and the context of the character is consistent with that rule.  It is invalid to generate a string containing these characters unless such a contextual rule is found and satisfied.  PRECIS does not define its own contextual rules, but instead re-uses the contextual rules defined for IDNA2008; please see Appendix A of <xref target='RFC5892'/> for more information.</t>
    </section>

    <section anchor="categories" title="Category Definitions Used to Calculate Derived Property Value">
      <t>The derived property obtains its value based on a two-step procedure:</t>
      <t>
        <list style='numbers'>
          <t>Characters are placed in one or more character categories either (1) based on core properties defined by the Unicode Standard or (2) by treating the code point as an exception and addressing the code point based on its code point value.  These categories are not mutually exclusive.</t>
          <t>Set operations are used with these categories to determine the values for a property that is specific to a given string class. These operations are specified under <xref target="PropertyCalculation" />.</t>
        </list>
      </t>
      <t>(Note: Unicode property names and property value names might have short abbreviations, such as "gc" for the General_Category property and "Ll" for the Lowercase_Letter property value of the gc property.)</t>
      <t>In the following specification of character categories, the operation that returns the value of a particular Unicode character property for a code point is designated by using the formal name of that property (from the Unicode <eref target="http://unicode.org/Public/UNIDATA/PropertyAliases.txt">PropertyAliases.txt</eref>) followed by '(cp)' for "code point".  For example, the value of the General_Category property for a code point is indicated by General_Category(cp).</t>
      <t>The first ten categories (A-J) shown below were previously defined for IDNA2008 and are copied directly from <xref target='RFC5892'/>.  Some of these categories are reused in PRECIS and some of them are not; however, the lettering of categories is retained to prevent overlap and to ease implementation of both IDNA2008 and PRECIS in a single software application.  The next seven categories (K-Q) are specific to PRECIS.</t>
        <section anchor="A" title="LetterDigits (A)">
          <t>Note: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.</t>
          <figure>
            <artwork>
A: General_Category(cp) is in {Ll, Lu, Lm, Lo, Mn, Mc, Nd}
            </artwork>
          </figure>
          <t>These rules identify characters commonly used in mnemonics and often informally described as "language characters".</t>
          <t>For more information, see section 4.5 of <xref target='UNICODE'/>.</t>
          <t>The categories used in this rule are:
            <list style="symbols">
              <t>Ll - Lowercase_Letter</t>
              <t>Lu - Uppercase_Letter</t>
              <t>Lm - Modifier_Letter</t>
              <t>Lo - Other_Letter</t>
              <t>Mn - Nonspacing_Mark</t>
              <t>Mc - Spacing_Mark</t>
              <t>Nd - Decimal_Number</t>
            </list>
          </t>
        </section>
        <section anchor="B" title="Unstable (B)">
          <t>Note: This category is defined in <xref target='RFC5892'/> but not used in PRECIS.</t>
          <!--
          <figure>
            <artwork>
B: toNFKC(toCaseFold(toNFKC(cp))) != cp
            </artwork>
          </figure>
          <t>This category is used to group the characters that are not stable under normalization form K (NFKC) and case folding.  In general, these code points are not suitable for use for IDN.
          <t>The toCaseFold() operation is defined in Section 3.13 of <xref target='UNICODE'/>.</t>
          <t>The toNFKC() operation returns the code point in normalization form KC.  For more information, see Section 5 of <xref target='UAX15'/>.</t>
          -->
        </section>
        <section anchor="C" title="IgnorableProperties (C)">
          <t>Note: This category is defined in <xref target='RFC5892'/> but not used in PRECIS.  See the "PrecisIgnorableProperties (M)" category below for a more inclusive category used in PRECIS identifiers.</t>
          <!--
          <figure>
            <artwork>
C: Default_Ignorable_Code_Point(cp) = True or
   White_Space(cp) = True or
   Noncharacter_Code_Point(cp) = True
            </artwork>
          </figure>
          <t>This category is used to group code points that are not recommended for use in identifiers.</t>
          <t>The definition for Default_Ignorable_Code_Point can be found in the Unicode <eref target="http://unicode.org/Public/UNIDATA/DerivedCoreProperties.txt">DerivedCoreProperties.txt</eref> file, and is at the time of Unicode 5.2:</t>
          <figure>
            <artwork>
  Other_Default_Ignorable_Code_Point 
+ Cf (Format characters)
+ Variation_Selector 
- White_Space 
- FFF9..FFFB (Annotation Characters) 
- 0600..0603, 06DD, 070F (exceptional Cf characters 
                          that should be visible)
            </artwork>
          </figure>
          -->
        </section>
        <section anchor="D" title="IgnorableBlocks (D)">
          <t>Note: This category is defined in <xref target='RFC5892'/> but not used in PRECIS.</t>
          <!--
          <figure>
            <artwork>
D: Block(cp) is in {Combining Diacritical Marks for Symbols,
                    Musical Symbols, Ancient Greek Musical 
                    Notation}
            </artwork>
          </figure>
          <t>This category is used to identifying code points that are not useful in mnemonics but may be useful for some string classes.</t>
          <t>The definition of blocks can be found in <eref target="http://unicode.org/Public/UNIDATA/Blocks.txt">Blocks.txt</eref>.</t>
          -->
        </section>
        <section anchor="E" title="LDH (E)">
          <t>Note: This category is defined in <xref target='RFC5892'/> but not used in PRECIS.  See the "ASCII7 (K)" category below for a more inclusive category used in PRECIS identifiers.</t>
          <!--
          <figure>
            <artwork>
E: cp is in {002D, 0030..0039, 0061..007A}
            </artwork>
          </figure>
          <t>This category is used in the second step to preserve the traditional "hostname" (LDH) characters ('-', 0-9 and a-z). In general, these code points are suitable for use for identifiers.</t>
          -->
        </section>
        <section anchor="F" title="Exceptions (F)">
          <t>Note: This category is defined in <xref target='RFC5892'/> and used in PRECIS to ensure consistent treatment of the relevant code points.</t>
          <figure>
            <artwork>
F: cp is in {00B7, 00DF, 0375, 03C2, 05F3, 05F4, 0640, 0660,
             0661, 0662, 0663, 0664, 0665, 0666, 0667, 0668,
             0669, 06F0, 06F1, 06F2, 06F3, 06F4, 06F5, 06F6,
             06F7, 06F8, 06F9, 06FD, 06FE, 07FA, 0F0B, 3007,
             302E, 302F, 3031, 3032, 3033, 3034, 3035, 303B,
             30FB}
            </artwork>
          </figure>
          <t>This category explicitly lists code points for which the category cannot be assigned using only the core property values that exist in the Unicode standard.  The values are according to the table below:</t>
          <figure>
            <artwork>
PVALID -- Would otherwise have been DISALLOWED

00DF; PVALID     # LATIN SMALL LETTER SHARP S
03C2; PVALID     # GREEK SMALL LETTER FINAL SIGMA
06FD; PVALID     # ARABIC SIGN SINDHI AMPERSAND
06FE; PVALID     # ARABIC SIGN SINDHI POSTPOSITION MEN
0F0B; PVALID     # TIBETAN MARK INTERSYLLABIC TSHEG
3007; PVALID     # IDEOGRAPHIC NUMBER ZERO

CONTEXTO -- Would otherwise have been DISALLOWED

00B7; CONTEXTO   # MIDDLE DOT
0375; CONTEXTO   # GREEK LOWER NUMERAL SIGN (KERAIA)
05F3; CONTEXTO   # HEBREW PUNCTUATION GERESH
05F4; CONTEXTO   # HEBREW PUNCTUATION GERSHAYIM
30FB; CONTEXTO   # KATAKANA MIDDLE DOT

CONTEXTO -- Would otherwise have been PVALID

0660; CONTEXTO   # ARABIC-INDIC DIGIT ZERO
0661; CONTEXTO   # ARABIC-INDIC DIGIT ONE
0662; CONTEXTO   # ARABIC-INDIC DIGIT TWO
0663; CONTEXTO   # ARABIC-INDIC DIGIT THREE
0664; CONTEXTO   # ARABIC-INDIC DIGIT FOUR
0665; CONTEXTO   # ARABIC-INDIC DIGIT FIVE
0666; CONTEXTO   # ARABIC-INDIC DIGIT SIX
0667; CONTEXTO   # ARABIC-INDIC DIGIT SEVEN
0668; CONTEXTO   # ARABIC-INDIC DIGIT EIGHT
0669; CONTEXTO   # ARABIC-INDIC DIGIT NINE
06F0; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT ZERO
06F1; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT ONE
06F2; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT TWO
06F3; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT THREE
06F4; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT FOUR
06F5; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT FIVE
06F6; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT SIX
06F7; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT SEVEN
06F8; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT EIGHT
06F9; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT NINE

DISALLOWED -- Would otherwise have been PVALID

0640; DISALLOWED # ARABIC TATWEEL
07FA; DISALLOWED # NKO LAJANYALAN
302E; DISALLOWED # HANGUL SINGLE DOT TONE MARK
302F; DISALLOWED # HANGUL DOUBLE DOT TONE MARK
3031; DISALLOWED # VERTICAL KANA REPEAT MARK
3032; DISALLOWED # VERTICAL KANA REPEAT WITH VOICED SOUND MARK
3033; DISALLOWED # VERTICAL KANA REPEAT MARK UPPER HALF
3034; DISALLOWED # VERTICAL KANA REPEAT WITH VOICED SOUND MARK 
                   UPPER HA
3035; DISALLOWED # VERTICAL KANA REPEAT MARK LOWER HALF
303B; DISALLOWED # VERTICAL IDEOGRAPHIC ITERATION MARK
            </artwork>
          </figure>
        </section>
        <section anchor="G" title="BackwardCompatible (G)">
          <t>Note: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.  Because of how the PRECIS string classes are defined, only changes that would result in code points being added to or removed from the LetterDigits ("A") category would result in backward-incompatible modifications to code point assignments.  Therefore, management of this category is handled via the processes specified in <xref target='RFC5892'/>.</t>
          <figure>
            <artwork>
G: cp is in {}
            </artwork>
          </figure>
          <t>This category includes the code points for which property values in versions of Unicode after 5.2 have changed in such a way that the derived property value would no longer be PVALID or DISALLOWED.  If changes are made to future versions of Unicode so that code points might change property value from PVALID or DISALLOWED, then this table can be updated and keep special exception values so that the property values for code points stay stable.</t>
        </section>
        <section anchor="H" title="JoinControl (H)">
          <t>Note: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.</t>
          <figure>
            <artwork>
H: Join_Control(cp) = True
            </artwork>
          </figure>
          <t>This category consists of Join Control characters (i.e., they are not in <xref target="A">LetterDigits</xref> but are still required in strings under some circumstances).</t>
        </section>
        <section anchor="I" title="OldHangulJamo (I)">
          <t>Note: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.</t>
          <figure>
            <artwork>
I: Hangul_Syllable_Type(cp) is in {L, V, T}
            </artwork>
          </figure>
          <t>This category consists of all conjoining Hangul Jamo (Leading Jamo, Vowel Jamo, and Trailing Jamo).</t>
          <t>Elimination of conjoining Hangul Jamos from the set of PVALID characters results in restricting the set of Korean PVALID characters just to preformed, modern Hangul syllable characters.  Old Hangul syllables, which must be spelled with sequences of conjoining Hangul Jamos, are not PVALID for string classes.</t>
        </section>
        <section anchor="J" title="Unassigned (J)">
          <t>Note: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.</t>
          <figure>
            <artwork>
J: General_Category(cp) is in {Cn} and
   Noncharacter_Code_Point(cp) = False
            </artwork>
          </figure>
          <t>This category consists of code points in the Unicode character set that are not (yet) assigned. It should be noted that Unicode distinguishes between 'unassigned code points' and 'unassigned characters'. The unassigned code points are all but (Cn - Noncharacters), while the unassigned *characters* are all but (Cn + Cs).</t>
        </section>
        <section anchor="K" title="ASCII7 (K)">
          <t>This PRECIS-specific category exempts most characters in the ASCII-7 range from other rules that might be applied during PRECIS processing, on the assumption that these code points are in such wide use that disallowing them would be counter-productive.</t>
          <figure>
            <artwork>
K: cp is in {0021..007E}
            </artwork>
          </figure>
        </section>
        <section anchor="L" title="Controls (L)">
          <figure>
            <artwork>
L: Control(cp) = True
            </artwork>
          </figure>
        </section>
        <section anchor="M" title="PrecisIgnorableProperties (M)">
          <t>This PRECIS-specific category is used to group code points that are not recommended for use in PRECIS string classes.</t>
          <figure>
            <artwork>
M: Default_Ignorable_Code_Point(cp) = True or
   Noncharacter_Code_Point(cp) = True
            </artwork>
          </figure>
          <t>The definition for Default_Ignorable_Code_Point can be found in the <eref target="http://unicode.org/Public/UNIDATA/DerivedCoreProperties.txt">DerivedCoreProperties.txt</eref> file, and at the time of Unicode 6.1 is as follows:</t>
          <figure>
            <artwork>
  Other_Default_Ignorable_Code_Point 
+ Cf (Format characters)
+ Variation_Selector 
- White_Space 
- FFF9..FFFB (Annotation Characters) 
- 0600..0604, 06DD, 070F, 110BD (exceptional Cf characters 
                                 that should be visible)
            </artwork>
          </figure>
        </section>
        <section anchor="N" title="Spaces (N)">
          <t>This PRECIS-specific category is used to group code points that are space characters.</t>
          <figure>
            <artwork>
N: General_Category(cp) is in {Zs}
            </artwork>
          </figure>
        </section>
        <section anchor="O" title="Symbols (O)">
          <t>This PRECIS-specific category is used to group code points that are symbols.</t>
          <figure>
            <artwork>
O: General_Category(cp) is in {Sm, Sc, Sk, So}
            </artwork>
          </figure>
        </section>
        <section anchor="P" title="Punctuation (P)">
          <t>This PRECIS-specific category is used to group code points that are punctuation characters.</t>
          <figure>
            <artwork>
P: General_Category(cp) is in {Pc, Pd, Ps, Pe, Pi, Pf, Po}
            </artwork>
          </figure>
        </section>
        <section anchor="Q" title="HasCompat (Q)">
          <t>This PRECIS-specific category is used to group code points that have compatibility equivalents as explained in Chapter 2 and Chapter 3 of <xref target='UNICODE'/>.</t>
          <figure>
            <artwork>
Q: toNFKC(cp) != cp
            </artwork>
          </figure>
          <t>The toNFKC() operation returns the code point in normalization form KC.  For more information, see Section 5 of <xref target='UAX15'/>.</t>
        </section>
        <section anchor="R" title="OtherLetterDigits (R)">
          <t>This PRECIS-specific category is used to group code points that are letters and digits other than the "traditional" letters and digits grouped under the LetterDigits (A) class (see <xref target='A'/>).</t>
          <figure>
            <artwork>
R: General_Category(cp) is in {Lt, Nl, No, Me}
            </artwork>
          </figure>
        </section>
      </section>
      <section anchor="PropertyCalculation" title="Calculation of the Derived Property">
        <t>Possible values of the derived property are:</t>
        <t>
          <list style="symbols">
            <t>PVALID</t>
            <t>SAFE_PVAL</t>
            <t>FREE_PVAL</t>
            <t>CONTEXTJ</t>
            <t>CONTEXTO</t>
            <t>DISALLOWED</t>
            <t>SAFE_DIS</t>
            <t>FREE_DIS</t>
            <t>UNASSIGNED</t>
          </list>
        </t>
        <t>Note: The value of the derived property calculated can depend on the string class; for example, if an identifier used in an application protocol is defined as using or subclassing the PRECIS IdentifierClass then a space character such as U+0020 would be assigned to SAFE_DIS, whereas if an identifier is defined as using or subclassing the PRECIS FreeformClass then the character would be assigned to FREE_PVAL.  For the sake of brevity, the designation "FREE_PVAL" is used in the code point tables, instead of the longer designation "SAFE_DIS or FREE_PVAL".  In practice, the derived properties SAFE_PVAL and FREE_DIS are not used in this specification, since every SAFE_PVAL code point is PVALID and every FREE_DIS code point is DISALLOWED.</t>
        <t>The algorithm to calculate the value of the derived property is as follows. (Note: Use of the name of a rule (such as "Exception") implies the set of code points that the rule defines, whereas the same name as a function call (such as "Exception(cp)") implies the value that the code point has in the Exceptions table.)</t>
        <figure>
          <artwork>
If .cp. .in. Exceptions Then Exceptions(cp);
Else If .cp. .in. BackwardCompatible Then BackwardCompatible(cp);
Else If .cp. .in. Unassigned Then UNASSIGNED;
Else If .cp. .in. ASCII7 Then PVALID;
Else If .cp. .in. JoinControl Then CONTEXTJ;
Else If .cp. .in. PrecisIgnorableProperties Then DISALLOWED;
Else If .cp. .in. Controls Then DISALLOWED;
Else If .cp. .in. OldHangulJamo Then DISALLOWED;
Else If .cp. .in. LetterDigits Then PVALID;
Else If .cp. .in. OtherLetterDigits Then SAFE_DIS or FREE_PVAL;
Else If .cp. .in. Spaces Then SAFE_DIS or FREE_PVAL;
Else If .cp. .in. Symbols Then SAFE_DIS or FREE_PVAL;
Else If .cp. .in. Punctuation Then SAFE_DIS or FREE_PVAL;
Else If .cp. .in. HasCompat Then SAFE_DIS or FREE_PVAL;
Else DISALLOWED;
          </artwork>
        </figure>
      </section>

    <section anchor="codepointexplain" title="Code Points">
      <t>The Categories and Rules defined under <xref target="categories" /> and <xref target="PropertyCalculation" /> apply to all Unicode code points. The table in <xref target="codepoints" /> shows, for illustrative purposes, the consequences of the categories and classification rules, and the resulting property values.</t>
      <t>The list of code points that can be found in <xref target="codepoints" /> is non-normative.  Instead, the rules defined by <xref target="categories"/> and <xref target="PropertyCalculation"/> are normative, and any tables are derived from the rules.</t>
    </section>

    <section title="Security Considerations" anchor='security'>
      <section title="General Issues" anchor='security-gen'>
        <t>The security of applications that use this framework can depend in part on the proper preparation and comparison of internationalized strings.  For example, such strings can be used to make authentication and authorization decisions, and the security of an application could be compromised if an entity providing a given string is connected to the wrong account or online resource based on different interpretations of the string.</t>
        <t>Specifications of application protocols that use this framework are encouraged to describe how internationalized strings are used in the protocol, including the security implications of any false positives and false negatives that might result from various comparison operations.  For some helpful guidelines, refer to <xref target='I-D.iab-identifier-comparison'/>, <xref target='RFC5890'/>, <xref target='UTR36'/>, and <xref target='UTR39'/>.</t>
      </section>
      <section title="Use of the IdentifierClass" anchor='security-nameclass'>
        <t>Strings that conform to the IdentifierClass and any subclass thereof are intended to be relatively safe for use in a broad range of applications, primarily because they include only letters, digits, and "grandfathered" non-space characters from the ASCII range; thus they exclude spaces, characters with compatibility equivalents, and almost all symbols and punctuation marks.  However, because such strings can still include so-called confusable characters (see <xref target='security-confusables'/>, protocol designers and implementers are encouraged to pay close attention to the security considerations described elsewhere in this document.</t>
      </section>
      <section title="Use of the FreeformClass" anchor='security-freeclass'>
        <t>Strings that conform to the FreeformClass and many subclasses thereof can include virtually any Unicode character.  This makes the FreeformClass quite expressive, but also problematic from the perspective of possible user confusion.  Protocol designers are hereby warned that the FreeformClass contains codepoints they might not understand, and are encouraged to use or subclass the IdentifierClass wherever feasible; however, if an application protocol requires more code points than are allowed by the IdentifierClass, protocol designers are encouraged to define a subclass of the FreeformClass that restricts the allowable code points as tightly as possible.  (The working group considered the option of allowing superclasses as well as subclasses of PRECIS string classes, but decided against allowing superclasses to reduce the likelihood of security and interoperability problems.)</t>
      </section>
      <section title="Local Character Set Issues" anchor='security-charset'>
        <t>When systems use local character sets other than ASCII and Unicode, these specifications leave the problem of converting between the local character set and Unicode up to the application or local system.  If different applications (or different versions of one application) implement different rules for conversions among coded character sets, they could interpret the same name differently and contact different application servers or other network entities.  This problem is not solved by security protocols, such as Transport Layer Security (TLS) <xref target='RFC5246'/> and the Simple Authentication and Security Layer (SASL) <xref target='RFC4422'/>, that do not take local character sets into account.</t>
      </section>
      <section title="Visually Similar Characters" anchor='security-confusables'>
        <t>Some characters are visually similar and thus can cause confusion among humans.  Such characters are often called "confusable characters" or "confusables".</t>
        <t>The problem of confusable characters is not necessarily caused by the use of Unicode code points outside the ASCII range.  For example, in some presentations and to some individuals the string "ju1iet" (spelled with the Arabic numeral one as the third character) might appear to be the same as "juliet" (spelled with the lowercase version of the letter "L"), especially on casual visual inspection.  This phenomenon is sometimes called "typejacking".</t>
        <t>However, the problem is made more serious by introducing the full range of Unicode code points into protocol strings.  For example, the characters U+13DA U+13A2 U+13B5 U+13AC U+13A2 U+13AC U+13D2 from the Cherokee block look similar to the ASCII characters "STPETER" as they might look when presented using a "creative" font family.</t>
        <t>In some examples of confusable characters, it is unlikely that the average human could tell the difference between the real string and the fake string.  (Indeed, there is no programmatic way to distinguish with full certainty which is the fake string and which is the real string; in some contexts, the string formed of Cherokee characters might be the real string and the string formed of ASCII characters might be the fake string.)  Because PRECIS-compliant strings can contain almost any properly-encoded Unicode code point, it can be relatively easy to fake or mimic some strings in systems that use the PRECIS framework.  The fact that some strings are easily confused introduces security vulnerabilities of the kind that have also plagued the World Wide Web, specifically the phenomenon known as phishing.</t>
        <t>Despite the fact that some specific suggestions about identification and handling of confusable characters appear in the Unicode Security Considerations <xref target='UTR36'/>, it is also true (as noted in <xref target='RFC5890'/>) that "there are no comprehensive technical solutions to the problems of confusable characters".  Because it is impossible to map visually similar characters without a great deal of context (such as knowing the font families used), the PRECIS framework does nothing to map similar-looking characters together, nor does it prohibit some characters because they look like others.</t>
        <t>Nevertheless, specifications for application protocols that use this framework MUST describe how confusable characters can be used to compromise the security of systems that use the protocol in question, along with any protocol-specific suggestions for overcoming those threats.  In particular, software implementations and service deployments that use PRECIS-based technologies are strongly encouraged to define and implement consistent policies regarding the registration, storage, and presentation of visually similar characters.  The following recommendations are appropriate:</t>
        <t>
          <list style='numbers'>
            <t>An application service SHOULD define a policy that specifies the scripts or blocks of characters that the service will allow to be registered (e.g., in an account name) or stored (e.g., in a file name).  Such a policy SHOULD be informed by the languages and scripts that are used to write registered account names; in particular, to reduce confusion, the service SHOULD forbid registration or storage of stings that contain characters from more than one script and SHOULD restrict registrations to characters drawn from a very small number of scripts (e.g., scripts that are well-understood by the administrators of the service, to improve manageability).</t>
            <t>User-oriented application software SHOULD define a policy that specifies how internationalized strings will be presented to a human user.  Because every human user of such software has a preferred language or a small set of preferred languages, the software SHOULD gather that information either explicitly from the user or implicitly via the operating system of the user's device.  Furthermore, because most languages are typically represented by a single script or a small set of scripts, and because most scripts are typically contained in one or more blocks of characters, the software SHOULD warn the user when presenting a string that mixes characters from more than one script or block, or that uses characters outside the normal range of the user's preferred language(s).  (Such a recommendation is not intended to discourage communication across different communities of language users; instead, it recognizes the existence of such communities and encourages due caution when presenting unfamiliar scripts or characters to human users.)</t>
          </list>
        </t>
      </section>
      <section title="Security of Passwords" anchor='security-passwords'>
        <t>Two goals of passwords are to maximize the amount of entropy and to minimize the potential for false positives.  These goals can be achieved in part by allowing a wide range of code points and by ensuring that passwords are handled in such a way that code points are not compared aggressively.  Therefore, it is NOT RECOMMENDED for application protocols to subclass the FreeformClass for use in passwords in a way that removes entire categories (e.g., by disallowing symbols or punctuation).  Furthermore, it is NOT RECOMMENDED for application protocols to map uppercase and titlecase code points to their lowercase equivalents in such strings; instead, it is RECOMMENDED to preserve the case of all code points contained in such strings and to compare them in a case-sensitive manner.</t>
        <t>That said, software implementers need to be aware that there exist tradeoffs between entropy and usability.  For example, allowing a user to establish a password containing "uncommon" code points might make it difficult for the user to access a service when using an unfamiliar or constrained input device.</t>
        <t>Some application protocols use passwords directly, whereas others reuse technologies that themselves process passwords (one example of such a technology is the Simple Authentication and Security Layer <xref target='RFC4422'/>).  Moreover, passwords are often carried by a sequence of protocols with backend authentication systems or data storage systems such as RADIUS <xref target='RFC2865'/> and LDAP <xref target='RFC4510'/>.  Developers of application protocols are encouraged to look into reusing these profiles instead of defining new ones, so that end-user expectations about passwords are consistent no matter which application protocol is used.</t>
      </section>
    </section>

    <section title="IANA Considerations" anchor='iana'>

      <section anchor="iana-derived" title="PRECIS Derived Property Value Registry">
        <t>IANA is requested to create a PRECIS-specific registry with the Derived Properties for the versions of Unicode that are released after (and including) version 6.1.  The derived property value is to be calculated in cooperation with a designated expert <xref target='RFC5226'/> according to the rules specified under <xref target="categories" /> and <xref target="PropertyCalculation" />, not by copying the non-normative table found under <xref target="codepoints" />.</t>
        <t>The IESG is to be notified if backward-incompatible changes to the table of derived properties are discovered or if other problems arise during the process of creating the table of derived property values or during expert review.  Changes to the rules defined under <xref target="categories" /> and <xref target="PropertyCalculation" />) require IETF Review, as described in <xref target='RFC5226'/>.</t>
      </section>

      <section anchor="iana-classes" title="PRECIS Base Classes Registry">
        <t>IANA is requested to create a registry of PRECIS string classes.  In accordance with <xref target='RFC5226'/>, the registration policy is "RFC Required".</t>
        <t>The registration template is as follows:</t>
        <t>
          <list style='hanging'>
            <t hangText='Base Class:'>[the name of the PRECIS string class]</t>
            <t hangText='Description:'>[a brief description of the PRECIS string class and its intended use, e.g., "A sequence of letters, numbers, and symbols that is used to identify or address a network entity."]</t>
            <t hangText='Width Mapping:'>[the behavioral rule for handling of width, e.g., "Map fullwidth and halfwidth characters to their decomposition equivalents."]</t>
            <t hangText='Additional Mappings:'>[any additional mappings are required or recommended, e.g., "Map non-ASCII space characters to ASCII space."; or "Application Specific" if to be defined by protocols that use the PRECIS string class]</t>
            <t hangText='Case Mapping:'>[the behavioral rule for handling of case, e.g., "Map uppercase and titlecase characters to lowercase."; or "Application Specific" if to be defined by protocols that use the PRECIS string class]</t>
            <t hangText='Normalization:'>[which Unicode normalization form is applied, e.g., "NFC"; or "Application Specific" if to be defined by protocols that use the PRECIS string class]</t>
            <t hangText='Directionality:'>[the behavioral rule for handling of right-to-left code points, e.g., "The 'Bidi Rule' defined in RFC 5893 applies."; or "Application Specific" if to be defined by protocols that use the PRECIS string class]</t>
            <t hangText='Specification:'>[the RFC number]</t>
          </list>
        </t>
        <t>The initial registrations are as follows:</t>
        <figure>
          <artwork>
Base Class: FreeformClass.
Description: A sequence of letters, numbers, symbols, spaces, and
      other code points that is used for free-form strings.
Width Mapping: Application Specific.
Additional Mappings: Application Specific.
Case Mapping: Application Specific.
Normalization: Application Specific.
Directionality: Application Specific.
Specification: RFC XXXX.  [Note to RFC Editor: please change XXXX to 
               the number issued for this specification.]

Base Class: IdentifierClass.
Description: A sequence of letters, numbers, and symbols that is 
      used to identify or address a network entity.
Width Mapping: Application Specific.
Additional Mappings: Application Specific.
Case Mapping: Application Specific.
Normalization: Application Specific.
Directionality: Application Specific.
Specification: RFC XXXX.  [Note to RFC Editor: please change XXXX to 
               the number issued for this specification.]
          </artwork>
        </figure>
      </section>

      <section anchor="iana-subclasses" title="PRECIS Subclasses Registry">
        <t>IANA is requested to create a registry of subclasses that use the PRECIS string classes.  In accordance with <xref target='RFC5226'/>, the registration policy is "Expert Review".  This policy was chosen in order to ensure that "customers" of PRECIS receive appropriate guidance regarding the sometimes complex and subtle internationalization issues related to subclassing of PRECIS string classes.</t>
        <t>The registration template is as follows:</t>
        <t>
          <list style='hanging'>
            <t hangText='Subclass:'>[the name of the subclass]</t>
            <t hangText='Base Class:'>[which PRECIS string class is being subclassed]</t>
            <t hangText='Exclusions:'>[a brief description of the specific code points that are excluded or of the properties based on which characters are excluded, e.g., "Eight legacy characters in the ASCII range" or "Any character that has a compatibility equivalent, i.e., the HasCompat category"]</t>
            <t hangText='Specification:'>[a pointer to relevant documentation, such as an RFC or Internet-Draft]</t>
          </list>
        </t>
        <t>In order to request a review, the registrant shall send a completed template to the precis@ietf.org list or its designated successor.</t>
        <t>Factors to focus on while reviewing subclass registrations include the following:</t>
        <t>
          <list style='symbols'>
            <t>Is the problem well-defined?</t>
            <t>Is it clear what applications will use this subclass?</t>
            <t>Would an existing PRECIS string class or subclass solve the problem?</t>
            <t>Are the defined exclusions a reasonable solution to the problem for the relevant applications?</t>
            <t>Is the subclass clearly defined?</t>
            <t>Does the subclass reduce the degree to which human users could be surprised by application behavior (the "principle of least user surprise")?</t>
            <t>Is the subclass based on an appropriate dividing line between user interface (culture, context, intent, locale, device limitations, etc.) and the use of conformant strings in protocol elements?</t>
            <t>Does the subclass introduce any new security concerns (e.g., false positives for authentication or authorization)?</t>
          </list>
        </t>
      </section>

      <section anchor="iana-usage" title="PRECIS Usage Registry">
        <t>IANA is requested to create a registry of application protocols that use the PRECIS string classes.  The registry will include one entry for each use (e.g., if a protocol uses both the IdentifierClass and the FreeformClass then the specification for that protocol would submit two registrations).  In accordance with <xref target='RFC5226'/>, the registration policy is "Expert Review".  This policy was chosen in order to ensure that "customers" of PRECIS receive appropriate guidance regarding the sometimes complex and subtle internationalization issues related to use of PRECIS string classes.</t>
        <t>The registration template is as follows:</t>
        <t>
          <list style='hanging'>
            <t hangText='Applicability:'>[the specific protocol elements to which this usage applies, e.g., "Localparts in XMPP addresses."]</t>
            <t hangText='Base Class:'>[the PRECIS string class that is being used or subclassed]</t>
            <t hangText='Subclass:'>[whether the protocol has defined a subclass of the PRECIS string class and, if so, the name of the subclass, e.g., "Yes, LocalpartIdentifierClass."]</t>
            <t hangText='Replaces:'>[the Stringprep profile that this PRECIS usage replaces, if any]</t>
            <t hangText='Width Mapping:'>[the behavioral rule for handling of width, e.g., "Map fullwidth and halfwidth characters to their decomposition equivalents."]</t>
            <t hangText='Additional Mappings:'>[any additional mappings are required or recommended, e.g., "Map non-ASCII space characters to ASCII space."]</t>
            <t hangText='Case Mapping:'>[the behavioral rule for handling of case, e.g., "Map uppercase and titlecase characters to lowercase."]</t>
            <t hangText='Normalization:'>[which Unicode normalization form is applied, e.g., "NFC"]</t>
            <t hangText='Directionality:'>[the behavioral rule for handling of right-to-left code points, e.g., "The 'Bidi Rule' defined in RFC 5893 applies."]</t>
            <t hangText='Specification:'>[a pointer to relevant documentation, such as an RFC or Internet-Draft]</t>
          </list>
        </t>
        <t>In order to request a review, the registrant shall send a completed template to the precis@ietf.org list or its designated successor.</t>
        <t>Factors to focus on while reviewing usage registrations include the following:</t>
        <t>
          <list style='symbols'>
            <t>Does the specification define what kinds of applications are involved and the protocol elements to which this usage applies?</t>
            <t>Is there a PRECIS string class or subclass that would be more appropriate to use?</t>
            <t>Are the normalization, case mapping, width mapping, additional mapping, and directionality rules appropriate for the intended use?</t>
            <t>Does the usage reduce the degree to which human users could be surprised by application behavior (the "principle of least user surprise")?</t>
            <t>Is the usage based on an appropriate dividing line between user interface (culture, context, intent, locale, device limitations, etc.) and the use of conformant strings in protocol elements?</t>
            <t>Does the usage introduce any new security concerns (e.g., false positives for authentication or authorization)?</t>
          </list>
        </t>
      </section>

    </section>

    <section title="Interoperability Considerations" anchor='interop'>
      <t>Although strings that are consumed in PRECIS-based application protocols are often encoded using UTF-8 <xref target='RFC3629'/>, the exact encoding is a matter for the application protocol that reuses PRECIS, not for the PRECIS framework.</t>
      <t>It is known that some existing systems are unable to support the full Unicode character set, or even any characters outside the ASCII range.  If two (or more) applications need to interoperate when exchanging data (e.g., for the purpose of authenticating a username or password), they will naturally need have in common at least one coded character set (as defined by <xref target='RFC6365'/>).  Establishing such a baseline is a matter for the application protocol that reuses PRECIS, not for the PRECIS framework.</t>
    </section>

  </middle>

  <back>
    <references title="Normative References">

<reference anchor='I-D.ietf-precis-mappings'>
<front>
<title>Mapping characters for precis classes</title>
<author initials='Y' surname='Yoneya' fullname='Yoshiro Yoneya'>
    <organization />
</author>
<author initials='T' surname='NEMOTO' fullname='Takahiro NEMOTO'>
    <organization />
</author>
<date month='December' day='26' year='2012' />
<abstract><t>Preparation and comparison of internationalized strings ("precis") framework [I-D.ietf-precis-framework] is defining several classes of strings for preparation and comparison.  In the document, case mapping is defined because many of protocols handle case sensitive or case insensitive string comparison and therefore preparation of string is mandatory.  As described in IDNA mapping [RFC5895] and precis problem statement [I-D.ietf-precis-problem-statement], mappings in internationalized strings are not limited to case, but also width, delimiters and/or other specials are taken into consideration.  This document is a guideline for authors of protocol profiles of precis framework and describes the mappings, that may be performed before precis framework, that must be considered between receiving user input and passing permitted code points to internationalized protocols.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-precis-mappings-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-precis-mappings-01.txt' />
</reference>

<reference anchor='RFC20'>
<front>
<title>ASCII format for network interchange</title>
<author initials='V.' surname='Cerf' fullname='Vint Cerf'>
<organization>University California Los Angeles (UCLA)</organization></author>
<date year='1969' day='16' month='October' />
<abstract>
<t>For concreteness, we suggest the use of standard 7-bit ASCII embedded in an 8 bit byte whose high order bit is always 0.</t></abstract></front>
<seriesInfo name='RFC' value='20' />
<format type='TXT' octets='18504' target='http://www.rfc-editor.org/rfc/rfc20.txt' />
</reference>

<reference anchor="RFC2119">
<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass.  Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date month='March' year='1997' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL
      NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,  &quot;MAY&quot;, and
      &quot;OPTIONAL&quot; in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>
<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
<format type='HTML' octets='14486' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5661' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>

<reference anchor='RFC5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'>
<organization /></author>
<date year='2008' month='March' />
<abstract>
<t>The Internet today is in need of a standardized form for the transmission of internationalized "text" information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5198' />
<format type='TXT' octets='45708' target='http://www.rfc-editor.org/rfc/rfc5198.txt' />
</reference>

<reference anchor="UNICODE" target="http://www.unicode.org/versions/Unicode6.2.0/">
  <front>
    <title>The Unicode Standard, Version 6.2</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date year="2012" />
  </front>
</reference>

    </references>
    <references title="Informative References">

<reference anchor='I-D.iab-identifier-comparison'>
<front>
<title>Issues in Identifier Comparison for Security Purposes</title>
<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>
<date month='March' day='10' year='2013' />
<abstract><t>Identifiers such as hostnames, URIs, and email addresses are often used in security contexts to identify security principals and resources.  In such contexts, an identifier supplied via some protocol is often compared against some policy to make security decisions such as whether the principal may access the resource, what level of authentication or encryption is required, etc.  If the parties involved in a security decision use different algorithms to compare identifiers, then failure scenarios ranging from denial of service to elevation of privilege can result.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-iab-identifier-comparison-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-iab-identifier-comparison-09.txt' />
</reference>

<reference anchor='I-D.ietf-xmpp-6122bis'>
<front>
<title>Extensible Messaging and Presence Protocol (XMPP): Address Format</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<date month='March' day='27' year='2013' />
<abstract><t>This document defines the address format for the Extensible Messaging and Presence Protocol (XMPP), including support for code points outside the ASCII range.  This document obsoletes RFC 6122.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-xmpp-6122bis-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-xmpp-6122bis-06.txt' />
</reference>

<reference anchor='I-D.ietf-precis-saslprepbis'>
<front>
<title>Username and Password Preparation Algorithms</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<author initials='A' surname='Melnikov' fullname='Alexey Melnikov'>
    <organization />
</author>
<date month='March' day='27' year='2013' />
<abstract><t>This document describes how to prepare Unicode strings representing user names and passwords, primarily for purposes of comparison.  This profile is intended to be used by Simple Authentication and Security Layer (SASL) mechanisms (such as PLAIN and SCRAM-SHA-1), as well as other protocols that exchange simple user names or passwords.  This document obsoletes RFC 4013.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-precis-saslprepbis-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-precis-saslprepbis-01.txt' />
</reference>

<reference anchor='I-D.ietf-precis-nickname'>
<front>
<title>Preparation and Comparison of Nicknames</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<date month='November' day='6' year='2012' />
<abstract><t>This document describes how to prepare and compare Unicode strings representing nicknames, primarily as used within textual chatrooms.  This profile is intended to be used by chatroom technologies based on both the Message Session Relay Protocol (MSRP) and the Extensible Messaging and Presence Protocol (XMPP).</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-precis-nickname-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-precis-nickname-05.txt' />
</reference>

<reference anchor='RFC2865'>
<front>
<title>Remote Authentication Dial In User Service (RADIUS)</title>
<author initials='C.' surname='Rigney' fullname='C. Rigney'>
<organization /></author>
<author initials='S.' surname='Willens' fullname='S. Willens'>
<organization /></author>
<author initials='A.' surname='Rubens' fullname='A. Rubens'>
<organization /></author>
<author initials='W.' surname='Simpson' fullname='W. Simpson'>
<organization /></author>
<date year='2000' month='June' />
<abstract>
<t>This document describes a protocol for carrying authentication, authorization, and configuration information between a Network Access Server which desires to authenticate its links and a shared Authentication Server. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='2865' />
<format type='TXT' octets='146456' target='http://www.rfc-editor.org/rfc/rfc2865.txt' />
</reference>

<reference anchor='RFC3454'>
<front>
<title>Preparation of Internationalized Strings ("stringprep")</title>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='M.' surname='Blanchet' fullname='M. Blanchet'>
<organization /></author>
<date year='2002' month='December' />
<abstract>
<t>This document describes a framework for preparing Unicode text strings in order to increase the likelihood that string input and string comparison work in ways that make sense for typical users throughout the world.  The stringprep protocol is useful for protocol identifier values, company and personal names, internationalized domain names, and other text strings.  This document does not specify how protocols should prepare text strings.  Protocols must create profiles of stringprep in order to fully specify the processing options. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='3454' />
<format type='TXT' octets='138684' target='http://www.rfc-editor.org/rfc/rfc3454.txt' />
</reference>

<reference anchor='RFC3490'>
<front>
<title>Internationalizing Domain Names in Applications (IDNA)</title>
<author initials='P.' surname='Faltstrom' fullname='P. Faltstrom'>
<organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='A.' surname='Costello' fullname='A. Costello'>
<organization /></author>
<date year='2003' month='March' />
<abstract>
<t>Until now, there has been no standard method for domain names to use characters outside the ASCII repertoire.  This document defines internationalized domain names (IDNs) and a mechanism called Internationalizing Domain Names in Applications (IDNA) for handling them in a standard fashion.  IDNs use characters drawn from a large repertoire (Unicode), but IDNA allows the non-ASCII characters to be represented using only the ASCII characters already allowed in so-called host names today.  This backward-compatible representation is required in existing protocols like DNS, so that IDNs can be introduced with no changes to the existing infrastructure.  IDNA is only meant for processing domain names, not free text. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='3490' />
<format type='TXT' octets='51943' target='http://www.rfc-editor.org/rfc/rfc3490.txt' />
</reference>

<reference anchor='RFC3491'>
<front>
<title>Nameprep: A Stringprep Profile for Internationalized Domain Names (IDN)</title>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='M.' surname='Blanchet' fullname='M. Blanchet'>
<organization /></author>
<date year='2003' month='March' />
<abstract>
<t>This document describes how to prepare internationalized domain name (IDN) labels in order to increase the likelihood that name input and name comparison work in ways that make sense for typical users throughout the world.  This profile of the stringprep protocol is used as part of a suite of on-the-wire protocols for internationalizing the Domain Name System (DNS). [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='3491' />
<format type='TXT' octets='10316' target='http://www.rfc-editor.org/rfc/rfc3491.txt' />
</reference>

<reference anchor='RFC3629'>
<front>
<title>UTF-8, a transformation format of ISO 10646</title>
<author initials='F.' surname='Yergeau' fullname='F. Yergeau'>
<organization /></author>
<date year='2003' month='November' />
<abstract>
<t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t></abstract></front>
<seriesInfo name='STD' value='63' />
<seriesInfo name='RFC' value='3629' />
<format type='TXT' octets='33856' target='http://www.rfc-editor.org/rfc/rfc3629.txt' />
</reference>

<reference anchor='RFC4422'>
<front>
<title>Simple Authentication and Security Layer (SASL)</title>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'>
<organization /></author>
<author initials='K.' surname='Zeilenga' fullname='K. Zeilenga'>
<organization /></author>
<date year='2006' month='June' />
<abstract>
<t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms. It provides a structured interface between protocols and mechanisms. The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms. The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.&lt;/t>&lt;t> This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection. In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.&lt;/t>&lt;t> This document obsoletes RFC 2222. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4422' />
<format type='TXT' octets='73206' target='http://www.rfc-editor.org/rfc/rfc4422.txt' />
</reference>

<reference anchor='RFC4510'>
<front>
<title>Lightweight Directory Access Protocol (LDAP): Technical Specification Road Map</title>
<author initials='K.' surname='Zeilenga' fullname='K. Zeilenga'>
<organization /></author>
<date year='2006' month='June' />
<abstract>
<t>The Lightweight Directory Access Protocol (LDAP) is an Internet protocol for accessing distributed directory services that act in accordance with X.500 data and service models.  This document provides a road map of the LDAP Technical Specification. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4510' />
<format type='TXT' octets='12354' target='http://www.rfc-editor.org/rfc/rfc4510.txt' />
</reference>

<reference anchor='RFC4690'>
<front>
<title>Review and Recommendations for Internationalized Domain Names (IDNs)</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<author initials='P.' surname='Faltstrom' fullname='P. Faltstrom'>
<organization /></author>
<author initials='C.' surname='Karp' fullname='C. Karp'>
<organization /></author>
<author>
<organization>IAB</organization></author>
<date year='2006' month='September' />
<abstract>
<t>This note describes issues raised by the deployment and use of Internationalized Domain Names.  It describes problems both at the time of registration and for use of those names in the DNS.  It recommends that IETF should update the RFCs relating to IDNs and a framework to be followed in doing so, as well as summarizing and identifying some work that is required outside the IETF.  In particular, it proposes that some changes be investigated for the Internationalizing Domain Names in Applications (IDNA) standard and its supporting tables, based on experience gained since those standards were completed.  This memo provides information for the Internet community.</t></abstract></front>
<seriesInfo name='RFC' value='4690' />
<format type='TXT' octets='100929' target='http://www.rfc-editor.org/rfc/rfc4690.txt' />
</reference>

<reference anchor='RFC5226'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'>
<organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
<organization /></author>
<date year='2008' month='May' />
<abstract>
<t>Many protocols make use of identifiers consisting of constants and other well-known values. Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec). To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority. For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).&lt;/t>&lt;t> In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made. If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role. This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.&lt;/t>&lt;t> This document obsoletes RFC 2434. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>
<seriesInfo name='BCP' value='26' />
<seriesInfo name='RFC' value='5226' />
<format type='TXT' octets='66160' target='http://www.rfc-editor.org/rfc/rfc5226.txt' />
</reference>

<reference anchor='RFC5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker'>
<organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'>
<organization /></author>
<date year='2008' month='January' />
<abstract>
<t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF.  It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='STD' value='68' />
<seriesInfo name='RFC' value='5234' />
<format type='TXT' octets='26359' target='http://www.rfc-editor.org/rfc/rfc5234.txt' />
</reference>

<reference anchor='RFC5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'>
<organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date year='2008' month='August' />
<abstract>
<t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5246' />
<format type='TXT' octets='222395' target='http://www.rfc-editor.org/rfc/rfc5246.txt' />
</reference>

<reference anchor='RFC5890'>
<front>
<title>Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>This document is one of a collection that, together, describe the protocol and usage context for a revision of Internationalized Domain Names for Applications (IDNA), superseding the earlier version.  It describes the document collection and provides definitions and other material that are common to the set. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5890' />
<format type='TXT' octets='54245' target='http://www.rfc-editor.org/rfc/rfc5890.txt' />
</reference>

<reference anchor='RFC5891'>
<front>
<title>Internationalized Domain Names in Applications (IDNA): Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>This document is the revised protocol definition for Internationalized Domain Names (IDNs).  The rationale for changes, the relationship to the older specification, and important terminology are provided in other documents.  This document specifies the protocol mechanism, called Internationalized Domain Names in Applications (IDNA), for registering and looking up IDNs in a way that does not require changes to the DNS itself.  IDNA is only meant for processing domain names, not free text. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5891' />
<format type='TXT' octets='38105' target='http://www.rfc-editor.org/rfc/rfc5891.txt' />
</reference>

<reference anchor='RFC5892'>
<front>
<title>The Unicode Code Points and Internationalized Domain Names for Applications (IDNA)</title>
<author initials='P.' surname='Faltstrom' fullname='P. Faltstrom'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>This document specifies rules for deciding whether a code point, considered in isolation or in context, is a candidate for inclusion in an Internationalized Domain Name (IDN).&lt;/t>&lt;t> It is part of the specification of Internationalizing Domain Names in Applications 2008 (IDNA2008). [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5892' />
<format type='TXT' octets='187370' target='http://www.rfc-editor.org/rfc/rfc5892.txt' />
</reference>

<reference anchor='RFC5893'>
<front>
<title>Right-to-Left Scripts for Internationalized Domain Names for Applications (IDNA)</title>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
<organization /></author>
<author initials='C.' surname='Karp' fullname='C. Karp'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>The use of right-to-left scripts in Internationalized Domain Names (IDNs) has presented several challenges.  This memo provides a new Bidi rule for Internationalized Domain Names for Applications (IDNA) labels, based on the encountered problems with some scripts and some shortcomings in the 2003 IDNA Bidi criterion. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5893' />
<format type='TXT' octets='38870' target='http://www.rfc-editor.org/rfc/rfc5893.txt' />
</reference>

<reference anchor='RFC5894'>
<front>
<title>Internationalized Domain Names for Applications (IDNA): Background, Explanation, and Rationale</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>Several years have passed since the original protocol for Internationalized Domain Names (IDNs) was completed and deployed.  During that time, a number of issues have arisen, including the need to update the system to deal with newer versions of Unicode.  Some of these issues require tuning of the existing protocols and the tables on which they depend.  This document provides an overview of a revised system and provides explanatory material for its components.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract></front>
<seriesInfo name='RFC' value='5894' />
<format type='TXT' octets='115174' target='http://www.rfc-editor.org/rfc/rfc5894.txt' />
</reference>

<reference anchor='RFC5895'>
<front>
<title>Mapping Characters for Internationalized Domain Names in Applications (IDNA) 2008</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick'>
<organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<date year='2010' month='September' />
<abstract>
<t>In the original version of the Internationalized Domain Names in Applications (IDNA) protocol, any Unicode code points taken from user input were mapped into a set of Unicode code points that "made sense", and then encoded and passed to the domain name system (DNS).  The IDNA2008 protocol (described in RFCs 5890, 5891, 5892, and 5893) presumes that the input to the protocol comes from a set of "permitted" code points, which it then encodes and passes to the DNS, but does not specify what to do with the result of user input.  This document describes the actions that can be taken by an implementation between receiving user input and passing permitted code points to the new IDNA protocol.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract></front>
<seriesInfo name='RFC' value='5895' />
<format type='TXT' octets='16556' target='http://www.rfc-editor.org/rfc/rfc5895.txt' />
</reference>

<reference anchor='RFC6365'>
<front>
<title>Terminology Used in Internationalization in the IETF</title>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2011' month='September' />
<abstract>
<t>This document provides a list of terms used in the IETF when discussing internationalization.  The purpose is to help frame discussions of internationalization in the various areas of the IETF and to help introduce the main concepts to IETF participants.  This memo documents an Internet Best Current Practice.</t></abstract></front>
<seriesInfo name='BCP' value='166' />
<seriesInfo name='RFC' value='6365' />
<format type='TXT' octets='103155' target='http://www.rfc-editor.org/rfc/rfc6365.txt' />
</reference>

<reference anchor='RFC6885'>
<front>
<title>Stringprep Revision and Problem Statement for the Preparation and Comparison of Internationalized Strings (PRECIS)</title>
<author initials='M.' surname='Blanchet' fullname='M. Blanchet'>
<organization /></author>
<author initials='A.' surname='Sullivan' fullname='A. Sullivan'>
<organization /></author>
<date year='2013' month='March' />
<abstract>
<t>If a protocol expects to compare two strings and is prepared only for those strings to be ASCII, then using Unicode code points in those strings requires they be prepared somehow.  Internationalizing Domain Names in Applications (here called IDNA2003) defined and used Stringprep and Nameprep.  Other protocols subsequently defined Stringprep profiles.  A new approach different from Stringprep and Nameprep is used for a revision of IDNA2003 (called IDNA2008).  Other Stringprep profiles need to be similarly updated, or a replacement of Stringprep needs to be designed.  This document outlines the issues to be faced by those designing a Stringprep replacement.</t></abstract></front>
<seriesInfo name='RFC' value='6885' />
<format type='TXT' octets='72167' target='http://www.rfc-editor.org/rfc/rfc6885.txt' />
</reference>

<reference anchor="UAX9" target='http://unicode.org/reports/tr9/'>
  <front>
    <title>Unicode Standard Annex #9: Unicode Bidirectional Algorithm</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date month="September" year="2012" />
  </front>
</reference>

<reference anchor="UAX11" target='http://unicode.org/reports/tr11/'>
  <front>
    <title>Unicode Standard Annex #11: East Asian Width</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date month="September" year="2012" />
  </front>
</reference>

<reference anchor="UAX15" target='http://unicode.org/reports/tr15/'>
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date month="August" year="2012" />
  </front>
</reference>

<reference anchor="UTR36" target='http://unicode.org/reports/tr36/'>
  <front>
    <title>Unicode Technical Report #36: Unicode Security Considerations</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date month="July" year="2012" />
  </front>
</reference>

<reference anchor="UTR39" target='http://unicode.org/reports/tr39/'>
  <front>
    <title>Unicode Technical Report #39: Unicode Security Mechanisms</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date month="July" year="2012" />
  </front>
</reference>

    </references>

    <section anchor="codepoints" title="Codepoint Table">
      <t>WARNING: The following table is incomplete and very likely contains errors!</t>
      <t>If one applies the property calculation rules from <xref target="PropertyCalculation"/> to the code points 0x0000 to 0x10FFFF in Unicode 6.1, the result is as shown in the following table, in Unicode Character Database (UCD) format.  The columns of the table are as follows:</t>
      <t>
        <list style='numbers'>
          <t>The code point or codepoint range.</t>
          <t>The assignment for the code point or range, where the value is one of PVALID, DISALLOWED, UNASSIGNED, CONTEXTO, CONTEXTJ, or FREE_PVAL (which includes SAFE_DIS).</t>
          <t>The name or names for the code point or range.</t>
        </list>
      </t>
      <t>This table is non-normative, and included only for illustrative purposes.  Please note that the strings displayed in the third column are not necessarily the formal name of the code point (as defined in <xref target='UNICODE'/>) because the fixed width of the RFC format necessitated truncation of many names.</t>
      <figure><artwork><![CDATA[
0000..001F  ; DISALLOWED  # <control>
0020        ; FREE_PVAL   # SPACE
0021..007E  ; PVALID      # EXCLAM MARK .. TILDE
007F..009F  ; DISALLOWED  # <control>
00A0..00A9  ; FREE_PVAL   # NO-BREAK SPACE .. COPYRIGHT SIGN
00AA        ; PVALID      # FEMININE ORDINAL INDICATOR
00AB..00AC  ; FREE_PVAL   # NO-BREAK SPACE .. NOT SIGN
00AD        ; DISALLOWED  # SOFT HYPH
00AE..00B6  ; FREE_PVAL   # REGISTERED SIGN .. PILCROW SIGN
00B7        ; CONTEXTO    # MIDDLE DOT
00B8..00BF  ; FREE_PVAL   # CEDILLA..INV QUEST IND
00C0..00D6  ; PVALID      # LAT CAP LET A W GRAV..LAT CAP O
00D7        ; FREE_PVAL   # MULTIPLICATION SIGN
00D8..00F6  ; PVALID      # LAT CAP LET O W STROKE..LAT SM 
00F7        ; FREE_PVAL   # DIVISION SIGN
00F8..0131  ; PVALID      # LAT SM LET O W STROKE..LAT SM LET
0132..0133  ; FREE_PVAL   # LAT CAP LIG IJ..LAT SM LIB IJ
0134..013E  ; PVALID      # LAT CAP LET J W CIRCUM..LAT SM LET
013F..0140  ; FREE_PVAL   # LAT CAP LET L W MID DOT..LAT SM LET
0141..0148  ; PVALID      # LAT CAP LET L W STROKE..LAT SM LET
0149        ; FREE_PVAL   # LAT SM LET N PRECEDED BY APOS
014A..017E  ; PVALID      # LAT CAP LET ENG..LAT SM LET Z W CA
017F        ; FREE_PVAL   # LAT SM LET LONG S
0180..01C3  ; PVALID      # LAT SM LET B W STROKE..LAT LET RETR
01C4..01CC  ; FREE_PVAL   # LAT CAP LET DZ W CARON..LAT SM
01CD..01F0  ; PVALID      # LAT CAP LET A W CARON..LAT SM LET J
01F1..01F3  ; FREE_PVAL   # LAT CAP LET DZ..LAT SM LET DZ
01F4..02AF  ; PVALID      # LAT CAP LET G W ACUTE..LAT SM
02B0..02B8  ; FREE_PVAL   # MOD LET SM H..MOD LET SM Y
02B9..02C1  ; PVALID      # MOD LET PRIME..MOD LET REV GLOT ST
02C2..02C5  ; FREE_PVAL   # MOD LET L ARROW..MOD LET D ARROW
02C6..02D1  ; PVALID      # MOD LET CIRCUM ACC..MOD LET HALF TR
02D2..02EB  ; FREE_PVAL   # MOD LET CENT R HALF RING..MOD LET Y
02EC        ; PVALID      # MOD LET VOICING
02ED        ; FREE_PVAL   # MOD LET UNASPIRATED
02EE        ; PVALID      # MOD LET DOUBLE APOS
02EF..02FF  ; FREE_PVAL   # MOD LET LOW D ARR..MOD LET LOW L AR
0300..0374  ; PVALID      # COMB GRAVE ACCENT..GREEK NUM SIGN
0375        ; CONTEXTO    # GREEK LOW NUM SIGN
0376..0377  ; PVALID      # GR CAP LET PAMPHYLIAN DIGAMMA..GR S
0378..0379  ; UNASSIGNED  # <reserved>..<reserved>
037A..037D  ; PVALID      # GR YPOGEGRAMMENI..GR SM REV DOT LUN
037E        ; FREE_PVAL   # GREEK QUEST MARK
037F..0383  ; UNASSIGNED  # <reserved>..<reserved>
0384..0385  ; FREE_PVAL   # GREEK TONOS..GREEK DIALYTIKA TONOS
0386        ; PVALID      # GR CAP LET ALPHA W TONOS
0387        ; FREE_PVAL   # GREEK ANO TELEIA
0388..038A  ; PVALID      # GR CAP LET EPSILON W TONOS..GR CAP
038B        ; UNASSIGNED  # <reserved>
038C        ; PVALID      # GREEK CAP LET OMICRON W TONOS
038D        ; UNASSIGNED  # <reserved>
038E..03A1  ; PVALID      # GR CAP LET EPSILON W TONOS..GR CAP
03A2        ; UNASSIGNED  # <reserved>
03A3..03CF  ; PVALID      # GREEK CAP LET SIGMA..GR CAP
03D0..03D2  ; FREE_PVAL   # GR BETA SYM..GR UPSILON W HOOK
03D3..03D4  ; PVALID      # GR UPSILON W ACUTE AND HOOK..GR UP
03D5..03D6  ; FREE_PVAL   # GR PHI SYM..GR PI SYM
03D7..03EF  ; PVALID      # GR KAI SYM..COPT SM LET DEI
03F0..03F2  ; FREE_PVAL   # GR KAPPA SYM..GR LUNATE SIGMA
03F3        ; PVALID      # GREEK LET YOT
03F4..03F6  ; FREE_PVAL   # GR CAP THETA..GR REV LUNATE EPSILON
03F7..03F8  ; PVALID      # GR CAP LET SHO..GR SM LET SHO
03F9        ; FREE_PVAL   # GREEK CAP LUNATE SIGMA SYM
03FA..0481  ; PVALID      # GR CAP LET SAN..CYR SML LET KOPPA
0482        ; FREE_PVAL   # CYR THOUSANDS SIGN
0483..0487  ; PVALID      # COMB CYR TITLO..COMB CYR POK
0488..048A  ; FREE_PVAL   # COMB CYR HUNDRED THOUSANDS SIGN..C
048B..0527  ; PVALID      # CYR SM LET SHORT I W TAIL..CYR S
0528..0530  ; UNASSIGNED  # <reserved>..<reserved>
0531..0556  ; PVALID      # ARM CAP LET AYB..ARM CAP LET FEH
0557..0558  ; UNASSIGNED  # <reserved>..<reserved>
0559        ; PVALID      # ARM MOD LET LEFT HALF RING
055A..055F  ; FREE_PVAL   # ARM APOS..ARM ABBREV
0560        ; UNASSIGNED  # <reserved>
0561..0586  ; PVALID      # ARM SM LET AYB..ARMENIAN SM LE
0587        ; FREE_PVAL   # ARM SM LIG ECH YIWN
0588        ; UNASSIGNED  # <reserved>
0589..058A  ; FREE_PVAL   # ARMENIAN FULL STOP..ARMENIAN HYPH
058B..058E  ; UNASSIGNED  # <reserved>..<reserved>
058F        ; FREE_PVAL   # ARMENIAN DRAM SIGN
0590        ; UNASSIGNED  # <reserved>
0591..05BD  ; PVALID      # HEBR ACC ETNAHTA..HEBR PNT ME
05BE        ; FREE_PVAL   # HEBR PUNCT MAQAF
05BF        ; PVALID      # HEBR PNT RAFE
05C0        ; FREE_PVAL   # HEBR PUNCT PASEQ
05C1..05C2  ; PVALID      # HEBR PNT SHIN DOT..HEBR PNT SIN DOT
05C3        ; FREE_PVAL   # HEBR PUNCT SOF PASUQ
05C4..05C5  ; PVALID      # HEBR MARK UP DOT..HEBR MARK LOW DOT
05C6        ; FREE_PVAL   # HEBR PUNCT NUN HAFUKHA
05C7        ; PVALID      # HEBR PNT QAMATS QATAN
05C8..05CF  ; UNASSIGNED  # <reserved>..<reserved>
05D0..05EA  ; PVALID      # HEBR LET ALEF..HEBR LET TAV
05EB..05EF  ; UNASSIGNED  # <reserved>..<reserved>
05F0..05F2  ; PVALID      # HEBR LIG YIDDISH DOUBLE VAV..HEBR L
05F3..05F4  ; CONTEXTO    # HEBR PUNCT GERESH..HEBR PUNCTUATIO
05F5..05FF  ; UNASSIGNED  # <reserved>..<reserved>
0600..0604  ; DISALLOWED  # ARAB NUM SIGN..ARAB SIGN SAM
0605        ; UNASSIGNED  # <reserved>..<reserved>
0606..060F  ; FREE_PVAL   # AR-IND CUBE ROOT..ARAB SIGN MISRA
0610..061A  ; PVALID      # ARAB SIGN SALLALLAHOU ALAYHE ..AR
061B        ; FREE_PVAL   # ARAB SEMICOLON
061C..061D  ; UNASSIGNED  # <reserved>..<reserved>
061E..061F  ; FREE_PVAL   # ARAB TRIPLE DOT PUNCT MARK..ARAB Q
0620        ; UNASSIGNED  # <reserved>
0621..063F  ; PVALID      # ARAB LET HAMZA..ARAB LET FARSI YEH
0640        ; DISALLOWED  # ARAB TATWEEL
0641..065F  ; PVALID      # ARAB LET FEH..ARAB WAVY HAMZA BEL
0660..0669  ; CONTEXTO    # AR-IND DIG ZERO..AR-IND DIG
066A..066D  ; FREE_PVAL   # ARAB PCT SIGN..ARAB FIVE PNTED STA
066E..0674  ; PVALID      # ARAB LET DOTLESS BEH..ARAB LET HIG
0675..0678  ; FREE_PVAL   # ARAB LET HIGH HAMZA ALEF..ARAB LET
0679..06D3  ; PVALID      # ARAB LET TTEH..ARAB LET YEH BARREE
06D4        ; FREE_PVAL   # ARAB FULL STOP
06D5..06DC  ; PVALID      # ARAB LET AE..ARAB SM HIGH SEEN
06DD        ; DISALLOWED  # ARAB END OF AYAH
06DE        ; FREE_PVAL   # ARAB START OF RUB EL HIZB
06DF..06E8  ; PVALID      # ARAB SM HIGH ROUNDED ZERO..ARAB SM
06E9        ; FREE_PVAL   # ARAB PLACE OF SAJDAH
06EA..06EF  ; PVALID      # ARAB EMPTY CENTRE LOW STOP..ARAB LET
06F0..06F9  ; CONTEXTO    # EXT AR-IND DIG ZERO..EXT A
06FA..06FF  ; PVALID      # ARAB LET SHEEN W DOT BEL..ARAB
0700..070D  ; FREE_PVAL   # SYR END OF PARA..SYR HARKLEAN AST
070E        ; UNASSIGNED  # <reserved>
070F        ; DISALLOWED  # SYR ABBR MARK
0710..07B1  ; PVALID      # SYR LET ALAPH..THAANA LET N
07B2..07BF  ; UNASSIGNED  # <reserved>..<reserved>
07C0..07F5  ; PVALID      # NKO DIG ZERO..NKO LOW TONE APOS
07F6..07F9  ; FREE_PVAL   # NKO SYM OO DENNEN..NKO EXCLAMATI
07FA        ; DISALLOWED  # NKO LAJANYALAN
07FB..07FF  ; UNASSIGNED  # <reserved>..<reserved>
0800..082D  ; PVALID      # SAMAR LET ALAF..SAMAR MARK NEQUDA
082E..082F  ; UNASSIGNED  # <reserved>..<reserved>
0830..083E  ; FREE_PVAL   # SAMAR PUNCT NEQUDAA..SAMAR PUN
083F        ; UNASSIGNED  # <reserved>
0840..085B  ; PVALID      # MANDAIC LET HALQA..MANDAIC GEM
085C..085D  ; UNASSIGNED  # <reserved>..<reserved>
085E        ; FREE_PVAL   # MANDAIC PUNCTUATION
08A0..08AC  ; PVALID      # ARAB LET BEH W SM V BEL..ARAB
08AD..08E3  ; UNASSIGNED  # <reserved>..<reserved>
08E4..08FE  ; PVALID      # ARAB CURLY FATHA..ARAB DAMMA W 
08FF        ; UNASSIGNED  # <reserved>
0900..0963  ; PVALID      # DEVAN SIGN INV CANDRABINDU..DEVAN V
0964..0965  ; FREE_PVAL   # DEVAN DANDA..DEVAN DOUBLE DANDA
0966..096F  ; PVALID      # DEVAN DIG ZERO..DEVAN DIG NINE
0970        ; FREE_PVAL   # DEVAN ABBR SIGN
0971..097F  ; PVALID      # DEVAN SIGN HIGH SPACING DOT..DEVAN
0980        ; UNASSIGNED  # <reserved>
0981..0983  ; PVALID      # BENG SIGN CANDRABINDU..BENG SIGN VISAR
0984        ; UNASSIGNED  # <reserved>
0985..098C  ; PVALID      # BENG LET A..BENG LET VOC L
098D..098E  ; UNASSIGNED  # <reserved>..<reserved>
098F..0990  ; PVALID      # BENG LET E..BENG LET AI
0991..0992  ; UNASSIGNED  # <reserved>..<reserved>
0993..09A8  ; PVALID      # BENG LET O..BENG LET NA
09A9        ; UNASSIGNED  # <reserved>
09AA..09B0  ; PVALID      # BENG LET PA..BENG LET RA
09B1        ; UNASSIGNED  # <reserved>
09B2        ; PVALID      # BENG LET LA
09B3..09B5  ; UNASSIGNED  # <reserved>..<reserved>
09B6..09B9  ; PVALID      # BENG LET SHA..BENG LET HA
09BA..09BB  ; UNASSIGNED  # <reserved>..<reserved>
09BC..09C4  ; PVALID      # BENG SIGN NUKTA..BENG VOW SIGN VOCAL
09C5..09C6  ; UNASSIGNED  # <reserved>..<reserved>
09C7..09C8  ; PVALID      # BENG VOW SIGN E..BENG VOW SIGN AI
09C9..09CA  ; UNASSIGNED  # <reserved>..<reserved>
09CB..09CE  ; PVALID      # BENG VOW SIGN O..BENG LET KHANDA
09CF..09D6  ; UNASSIGNED  # <reserved>..<reserved>
09D7        ; PVALID      # BENG AU LEN MARK
09D8..09DB  ; UNASSIGNED  # <reserved>..<reserved>
09DC..09DD  ; PVALID      # BENG LET RRA..BENG LET RHA
09DE        ; UNASSIGNED  # <reserved>
09DF..09E3  ; PVALID      # BENG LET YYA..BENG VOW SIG
09E4..09E5  ; UNASSIGNED  # <reserved>..<reserved>
09E6..09F1  ; PVALID      # BENG DIG ZERO..BENG LET RA W L
09F2..09F3  ; FREE_PVAL   # BENG RUPEE MARK..BENG RUPEE SIGN
09F4..09FB  ; DISALLOWED  # BENG CURR NUM ONE..BENG GANDA MARK
09FC..0A00  ; UNASSIGNED  # <reserved>..<reserved>
0A01..0A03  ; PVALID      # GURMUKHI SIGN ADAK BINDI..GURMUKHI 
0A04        ; UNASSIGNED  # <reserved>
0A05..0A0A  ; PVALID      # GURMUKHI LET A..GURMUKHI LET UU
0A0B..0A0E  ; UNASSIGNED  # <reserved>..<reserved>
0A0F..0A10  ; PVALID      # GURMUKHI LET EE..GURMUKHI LET AI
0A11..0A12  ; UNASSIGNED  # <reserved>..<reserved>
0A13..0A28  ; PVALID      # GURMUKHI LET OO..GURMUKHI LET NA
0A29        ; UNASSIGNED  # <reserved>
0A2A..0A30  ; PVALID      # GURMUKHI LET PA..GURMUKHI LET RA
0A31        ; UNASSIGNED  # <reserved>
0A32..0A33  ; PVALID      # GURMUKHI LET LA..GURMUKHI LET LLA
0A34        ; UNASSIGNED  # <reserved>
0A35.OA36   ; PVALID      # GURMUKHI LET VA..GURMUKHI LET SHA
0A37        ; UNASSIGNED  # <reserved>
0A38..0A39  ; PVALID      # GURMUKHI LET SA..GURMUKHI LET HA
0A3A..0A3B  ; UNASSIGNED  # <reserved>..<reserved>
0A3C        ; PVALID      # GURMUKHI SIGN NUKTA
0A3D        ; UNASSIGNED  # <reserved>
0A3E..0A42  ; PVALID      # GURMUKHI VOW SIGN AA..GURMUKHI V
0A43..0A46  ; UNASSIGNED  # <reserved>..<reserved>
0A47..0A48  ; PVALID      # GURMUKHI VOW SIGN EE..GURMUKHI V
0A49..0A4A  ; UNASSIGNED  # <reserved>..<reserved>
0A4B..0A4D  ; PVALID      # GURMUKHI VOW SIGN OO..GURMUKHI S
0A4E..0A50  ; UNASSIGNED  # <reserved>..<reserved>
0A51        ; PVALID      # GURMUKHI SIGN UDAAT
0A52..0A58  ; UNASSIGNED  # <reserved>..<reserved>
0A59..0A5B  ; PVALID      # GURMUKHI LET KHHA..GURMUKHI LET RRA
0A5D        ; UNASSIGNED  # <reserved>
0A5E        ; PVALID      # GURMUKHI LET FA
0A5F..0A65  ; UNASSIGNED  # <reserved>..<reserved>
0A66..0A75  ; PVALID      # GURMUKHI DIG ZERO..GURMUKHI SIGN YA
0A76..0A80  ; UNASSIGNED  # <reserved>..<reserved>
0A81..0A83  ; PVALID      # GUJARATI SIGN CANDRABINDU..GUJARATI
0A84        ; UNASSIGNED  # <reserved>
0A85..0A8D  ; PVALID      # GUJARATI LET A..GUJARATI VOW CAND
0A8E        ; UNASSIGNED  # <reserved>
0A8F..0A91  ; PVALID      # GUJARATI LET E..GUJARATI VOW CAND
0A92        ; UNASSIGNED  # <reserved>
0A93..0AA8  ; PVALID      # GUJARATI LET O..GUJARATI LET NA
0AA9        ; UNASSIGNED  # <reserved>
0AAA..0AB0  ; PVALID      # GUJARATI LET PA..GUJARATI LET RA
0AB1        ; UNASSIGNED  # <reserved>
0AB2..0AB3  ; PVALID      # GUJARATI LET LA..GUJARATI LET LLA
0AB4        ; UNASSIGNED  # <reserved>
0AB5..0AB9  ; PVALID      # GUJARATI LET VA..GUJARATI LET HA
0ABA..0ABB  ; UNASSIGNED  # <reserved>..<reserved>
0ABC..0AC5  ; PVALID      # GUJARATI SIGN NUKTA..GUJARATI VOW
0AC6        ; UNASSIGNED  # <reserved>
0AC7..0AC9  ; PVALID      # GUJARATI VOW SIGN E..GUJARATI VOW
0ACA        ; UNASSIGNED  # <reserved>
0ACB..0ACD  ; PVALID      # GUJARATI VOW SIGN O..GUJARATI SIG
0ACE..0ACF  ; UNASSIGNED  # <reserved>..<reserved>
0AD0        ; PVALID      # GUJARATI OM
0AD1..0ADF  ; UNASSIGNED  # <reserved>..<reserved>
0AE0..0AE3  ; PVALID      # GUJARATI LET VOC RR..GUJARATI V
0AE4..0AE5  ; UNASSIGNED  # <reserved>..<reserved>
0AE6..0AEF  ; PVALID      # GUJARATI DIG ZERO..GUJARATI DIG NINE
0AF0        ; UNASSIGNED  # <reserved>
0AF1        ; FREE_PVAL   # GUJARATI RUPEE SIGN
0AF2..0B00  ; UNASSIGNED  # <reserved>..<reserved>
0B01..0B03  ; PVALID      # ORIYA SIGN CANDRABINDU..ORIYA SIGN
0B04        ; UNASSIGNED  # <reserved>
0B05..0B0C  ; PVALID      # ORIYA LET A..ORIYA LET VOC L
0B0D..0B0E  ; UNASSIGNED  # <reserved>..<reserved>
0B0F..0B10  ; PVALID      # ORIYA LET E..ORIYA LET AI
0B11..0B12  ; UNASSIGNED  # <reserved>..<reserved>
0B13..0B28  ; PVALID      # ORIYA LET O..ORIYA LET NA
0B29        ; UNASSIGNED  # <reserved>
0B2A..0B30  ; PVALID      # ORIYA LET PA..ORIYA LET RA
0B31        ; UNASSIGNED  # <reserved>
0B32..0B33  ; PVALID      # ORIYA LET LA..ORIYA LET LLA
0B34        ; UNASSIGNED  # <reserved>
0B35..0B39  ; PVALID      # ORIYA LET VA..ORIYA LET HA
0B3A..0B3B  ; UNASSIGNED  # <reserved>..<reserved>
0B3C..0B44  ; PVALID      # ORIYA SIGN NUKTA..ORIYA VOW SIGN 
0B45..0B46  ; UNASSIGNED  # <reserved>..<reserved>
0B47..0B48  ; PVALID      # ORIYA VOW SIGN E..ORIYA VOW SIG
0B49..0B4A  ; UNASSIGNED  # <reserved>..<reserved>
0B4B..0B4D  ; PVALID      # ORIYA VOW SIGN O..ORIYA SIGN VIRA
0B4E..0B55  ; UNASSIGNED  # <reserved>..<reserved>
0B56..0B57  ; PVALID      # ORIYA AI LEN MARK..ORIYA AU LENG
0B58..0B5B  ; UNASSIGNED  # <reserved>..<reserved>
0B5C..0B5D  ; PVALID      # ORIYA LET RRA..ORIYA LET RHA
0B5E        ; UNASSIGNED  # <reserved>
0B5F..0B63  ; PVALID      # ORIYA LET YYA..ORIYA VOW SIGN VOCA
0B64..0B65  ; UNASSIGNED  # <reserved>..<reserved>
0B66..0B6F  ; PVALID      # ORIYA DIG ZERO..ORIYA DIG NINE
0B70        ; FREE_PVAL   # ORIYA ISSHAR
0B71        ; PVALID      # ORIYA LET WA
0B72..0B77  ; FREE_PVAL   # ORIYA FRACT ONE QUART..ORIYA FRACT
0B78..0B81  ; UNASSIGNED  # <reserved>..<reserved>
0B82..0B83  ; PVALID      # TAMIL SIGN ANUSVARA..TAMIL SIGN VIS
0B84        ; UNASSIGNED  # <reserved>
0B85..0B8A  ; PVALID      # TAMIL LET A..TAMIL LET UU
0B8B..0B8D  ; UNASSIGNED  # <reserved>..<reserved>
0B8E..0B90  ; PVALID      # TAMIL LET E..TAMIL LET AI
0B91        ; UNASSIGNED  # <reserved>
0B92..0B95  ; PVALID      # TAMIL LET O..TAMIL LET KA
0B96..0B98  ; UNASSIGNED  # <reserved>..<reserved>
0B99..0B9A  ; PVALID      # TAMIL LET NGA..TAMIL LET CA
0B9B        ; UNASSIGNED  # <reserved>
0B9C        ; PVALID      # TAMIL LET JA
0B9D        ; UNASSIGNED  # <reserved>
0B9E..0B9F  ; PVALID      # TAMIL LET NYA..TAMIL LET TTA
0BA0..0BA2  ; UNASSIGNED  # <reserved>..<reserved>
0BA3..0BA4  ; PVALID      # TAMIL LET NNA..TAMIL LET TA
0BA5..0BA7  ; UNASSIGNED  # <reserved>..<reserved>
0BA8..0BAA  ; PVALID      # TAMIL LET NA..TAMIL LET PA
0BAB..0BAD  ; UNASSIGNED  # <reserved>..<reserved>
0BAE..0BB9  ; PVALID      # TAMIL LET MA..TAMIL LET HA
0BBA..0BBD  ; UNASSIGNED  # <reserved>..<reserved>
0BBE..0BC2  ; PVALID      # TAMIL VOW SIGN AA..TAMIL VOW SI
0BC3..0BC5  ; UNASSIGNED  # <reserved>..<reserved>
0BC6..0BC8  ; PVALID      # TAMIL VOW SIGN E..TAMIL VOW SIG
0BC9        ; UNASSIGNED  # <reserved>
0BCA..0BCD  ; PVALID      # TAMIL VOW SIGN O..TAMIL SIGN VIRA
0BCE..0BCF  ; UNASSIGNED  # <reserved>..<reserved>
0BD0        ; PVALID      # TAMIL OM
0BD1..0BD6  ; UNASSIGNED  # <reserved>..<reserved>
0BD7        ; PVALID      # TAMIL AU LEN MARK
0BD8..0BE5  ; UNASSIGNED  # <reserved>..<reserved>
0BE6..0BEF  ; PVALID      # TAMIL DIG ZERO..TAMIL DIG NINE
0BF0..0BFA  ; FREE_PVAL   # TAMIL NUM TEN..TAMIL NUM SIGN
0BFB..0C00  ; UNASSIGNED  # <reserved>..<reserved>
0C01..0C03  ; PVALID      # TELUGU SIGN CANDRABINDU..TELUGU SIG
0C04        ; UNASSIGNED  # <reserved>
0C05..0C0C  ; PVALID      # TELUGU LET A..TELUGU LET VOC L
0C0D        ; UNASSIGNED  # <reserved>
0C0E..0C10  ; PVALID      # TELUGU LET E..TELUGU LET AI
0C11        ; UNASSIGNED  # <reserved>
0C12..0C28  ; PVALID      # TELUGU LET O..TELUGU LET NA
0C29        ; UNASSIGNED  # <reserved>
0C2A..0C33  ; PVALID      # TELUGU LET PA..TELUGU LET LLA
0C34        ; UNASSIGNED  # <reserved>
0C35..0C39  ; PVALID      # TELUGU LET VA..TELUGU LET HA
0C3A..0C3C  ; UNASSIGNED  # <reserved>..<reserved>
0C3D..0C44  ; PVALID      # TELUGU SIGN AVAGRAHA..TELUGU VOW SI
0C45        ; UNASSIGNED  # <reserved>
0C46..0C48  ; PVALID      # TELUGU VOW SIGN E..TELUGU VOW SIGN
0C49        ; UNASSIGNED  # <reserved>
0C4A..0C4D  ; PVALID      # TELUGU VOW SIGN O..TELUGU SIGN VIRA
0C4E..0C54  ; UNASSIGNED  # <reserved>..<reserved>
0C55..0C56  ; PVALID      # TELUGU LEN MARK..TELUGU AI LEN MARK
0C57        ; UNASSIGNED  # <reserved>
0C58..0C59  ; PVALID      # TELUGU LET TSA..TELUGU LET DZA
0C5A..0C5F  ; UNASSIGNED  # <reserved>..<reserved>
0C60..0C63  ; PVALID      # TELUGU LET VOC RR..TELUGU VOW S
0C64..0C65  ; UNASSIGNED  # <reserved>..<reserved>
0C66..0C6F  ; PVALID      # TELUGU DIG ZERO..TELUGU DIG NINE
0C70..0C77  ; UNASSIGNED  # <reserved>..<reserved>
0C78..0C7E  ; DISALLOWED  # TELUGU FRACTION DIG ZERO FOR ODD PO
0C7F        ; FREE_PVAL   # TELUGU SIGN TUUMU
0C80..0C81  ; UNASSIGNED  # <reserved>..<reserved>
0C82..0C83  ; PVALID      # KANNADA SIGN ANUSVARA..KANNADA SIGN
0C84        ; UNASSIGNED  # <reserved>
0C85..0C8C  ; PVALID      # KANNADA LET A..KANNADA LET VOC L
0C8D        ; UNASSIGNED  # <reserved>
0C8E..0C90  ; PVALID      # KANNADA LET E..KANNADA LET AI
0C91        ; UNASSIGNED  # <reserved>
0C92..0CA8  ; PVALID      # KANNADA LET O..KANNADA LET NA
0CA9        ; UNASSIGNED  # <reserved>
0CAA..0CB3  ; PVALID      # KANNADA LET PA..KANNADA LET LLA
0CB4        ; UNASSIGNED  # <reserved>
0CB5..0CB9  ; PVALID      # KANNADA LET VA..KANNADA LET HA
0CBA..0CBB  ; UNASSIGNED  # <reserved>..<reserved>
0CBC..0CC4  ; PVALID      # KANNADA SIGN NUKTA..KANNADA VOW SIG
0CC5        ; UNASSIGNED  # <reserved>
0CC6..0CC8  ; PVALID      # KANNADA VOW SIGN E..KANNADA VOW SIG
0CC9        ; UNASSIGNED  # <reserved>
0CCA..0CCD  ; PVALID      # KANNADA VOW SIGN O..KANNADA SIGN VI
0CCE..0CD4  ; UNASSIGNED  # <reserved>..<reserved>
0CD5..0CD6  ; PVALID      # KANNADA LEN MARK..KANNADA AI LEN MA
0CD7..0CDD  ; UNASSIGNED  # <reserved>..<reserved>
0CDE        ; PVALID      # KANNADA LET FA
0CDF        ; UNASSIGNED  # <reserved>
0CE0..0CE3  ; PVALID      # KANNADA LET VOC RR..KANNADA VOW SIG
0CE4..0CE5  ; UNASSIGNED  # <reserved>..<reserved>
0CE6..0CEF  ; PVALID      # KANNADA DIG ZERO..KANNADA DIG NINE
0CF0        ; UNASSIGNED  # <reserved>
0CF1..0CF2  ; DISALLOWED  # KANNADA SIGN JIHVAMULIYA..KANNADA S
0CF3..0D01  ; UNASSIGNED  # <reserved>..<reserved>
0D02..0D03  ; PVALID      # MALAY SIGN ANUSVARA..MALAY SIGN VIS
0D04        ; UNASSIGNED  # <reserved>
0D05..0D0C  ; PVALID      # MALAY LET A..MALAY LET VOC
0D0D        ; UNASSIGNED  # <reserved>
0D0E..0D10  ; PVALID      # MALAY LET E..MALAY LET AI
0D11        ; UNASSIGNED  # <reserved>
0D12..0D3A  ; PVALID      # MALAY LET O..MALAY LET TTTA
0D3B..0D3C  ; UNASSIGNED  # <reserved>..<reserved>
0D3D..0D44  ; PVALID      # MALAY SIGN AVAGRAHA..MALAY VOW SIG
0D45        ; UNASSIGNED  # <reserved>
0D46..0D48  ; PVALID      # MALAY VOW SIGN E..MALAY VOW SIGN
0D49        ; UNASSIGNED  # <reserved>
0D4A..0D4E  ; PVALID      # MALAY VOW SIGN O..MALAY LET DOT REP
0D4F..0D56  ; UNASSIGNED  # <reserved>..<reserved>
0D57        ; PVALID      # MALAY AU LEN MARK
0D58..0D59  ; UNASSIGNED  # <reserved>..<reserved>
0D60..0D63  ; PVALID      # MALAY LET VOC RR..MALAY VOW
0D64..0D65  ; UNASSIGNED  # <reserved>..<reserved>
0D66..0D6F  ; PVALID      # MALAY DIG ZERO..MALAY DIG NINE
0D70..0D75  ; FREE_PVAL   # MALAY NUM TEN..MALAY FRACTION THR
0D76..0D78  ; UNASSIGNED  # <reserved>..<reserved>
0D79        ; FREE_PVAL   # MALAY DATE MARK
0D7A..0D7F  ; PVALID      # MALAY LET CHILLU NN..MALAY LET
0D80..0D81  ; UNASSIGNED  # <reserved>..<reserved>
0D82..0D83  ; PVALID      # SINH SIGN ANUSVARAYA..SINH SIGN VIS
0D84        ; UNASSIGNED  # <reserved>
0D85..0D96  ; PVALID      # SINH LET AYANNA..SINH LET AUYANN
0D97..0D99  ; UNASSIGNED  # <reserved>..<reserved>
0D9A..0DB1  ; PVALID      # SINH LET ALPAPRAANA KAYANNA..SINH L
0DB2        ; UNASSIGNED  # <reserved>
0DB3..0DBB  ; PVALID      # SINH LET SANYAKA DAYANNA..SINH LETT
0DBC        ; UNASSIGNED  # <reserved>
0DBD        ; PVALID      # SINH LET DANTAJA LAYANNA
0DBE..0DBF  ; UNASSIGNED  # <reserved>..<reserved>
0DC0..0DC6  ; PVALID      # SINH LET VAYANNA..SINH LET FAYAN
0DC7..0DC9  ; UNASSIGNED  # <reserved>..<reserved>
0DCA        ; PVALID      # SINH SIGN AL-LAKUNA
0DCB..0DCE  ; UNASSIGNED  # <reserved>..<reserved>
0DCF..0DD4  ; PVALID      # SINH VOW SIGN AELA-PILLA..SINH VOW
0DD5        ; UNASSIGNED  # <reserved>
0DD6        ; PVALID      # SINH VOW SIGN DIGA PAA-PILLA
0DD7        ; UNASSIGNED  # <reserved>
0DD8..0DDF  ; PVALID      # SINH VOW SIGN GAETTA-PILLA..SINH VO
0DE0..0DF1  ; UNASSIGNED  # <reserved>..<reserved>
0DF2..0DF3  ; PVALID      # SINH VOW SIGN DIGA GAETTA-PILLA..SI
0DF4        ; FREE_PVAL   # SINH PUNCT KUNDDALIYA
0DF5..0E00  ; UNASSIGNED  # <reserved>..<reserved>
0E01..0E32  ; PVALID      # THAI CHAR KO KAI..THAI CHAR SARA A
0E33        ; FREE_PVAL   # THAI CHAR SARA AM
0E34..0E3A  ; PVALID      # THAI CHAR SARA I..THAI CHAR PHINTH
0E3B..0E3E  ; UNASSIGNED  # <reserved>..<reserved>
0E3F        ; FREE_PVAL   # THAI CURRENCY SYM BAHT
0E40..0E4E  ; PVALID      # THAI CHAR SARA E..THAI CHAR YAMAKK
0E4F        ; FREE_PVAL   # THAI CHAR FONGMAN
0E50..0E59  ; PVALID      # THAI DIG ZERO..THAI DIG NINE
0E5A..0E5B  ; FREE_PVAL   # THAI CHAR ANGKHANKHU..THAI CHAR KH
0E5C..0E80  ; UNASSIGNED  # <reserved>..<reserved>
0E81..0E82  ; PVALID      # LAO LET KO..LAO LET KHO SUNG
0E83        ; UNASSIGNED  # <reserved>
0E84        ; PVALID      # LAO LET KHO TAM
0E85..0E86  ; UNASSIGNED  # <reserved>..<reserved>
0E87..0E88  ; PVALID      # LAO LET NGO..LAO LET CO
0E89        ; UNASSIGNED  # <reserved>
0E8A        ; PVALID      # LAO LET SO TAM
0E8B..0E8C  ; UNASSIGNED  # <reserved>..<reserved>
0E8D        ; PVALID      # LAO LET NYO
0E8E..0E93  ; UNASSIGNED  # <reserved>..<reserved>
0E94..0E97  ; PVALID      # LAO LET DO..LAO LET THO TAM
0E98        ; UNASSIGNED  # <reserved>
0E99..0E9F  ; PVALID      # LAO LET NO..LAO LET FO SUNG
0EA0        ; UNASSIGNED  # <reserved>
0EA1..0EA3  ; PVALID      # LAO LET MO..LAO LET LO LING
0EA4        ; UNASSIGNED  # <reserved>
0EA5        ; PVALID      # LAO LET LO LOOT
0EA6        ; UNASSIGNED  # <reserved>
0EA7        ; PVALID      # LAO LET WO
0EA8..0EA9  ; UNASSIGNED  # <reserved>..<reserved>
0EAA..0EAB  ; PVALID      # LAO LET SO SUNG..LAO LET HO SUNG
0EAC        ; UNASSIGNED  # <reserved>
0EAD..0EB2  ; PVALID      # LAO LET O..LAO VOW SIGN AA
0EB3        ; FREE_PVAL   # LAO VOW SIGN AM
0EB4..0EB9  ; PVALID      # LAO VOW SIGN I..LAO VOW SIGN UU
0EBA        ; UNASSIGNED  # <reserved>
0EBB..0EBD  ; PVALID      # LAO VOW SIGN MAI KON..LAO SEMIVOW SIG
0EBE..0EBF  ; UNASSIGNED  # <reserved>..<reserved>
0EC0..0EC4  ; PVALID      # LAO VOW SIGN E..LAO VOW SIGN AI
0EC5        ; UNASSIGNED  # <reserved>
0EC6        ; PVALID      # LAO KO LA
0EC7        ; UNASSIGNED  # <reserved>
0EC8..0ECD  ; PVALID      # LAO TONE MAI EK..LAO NIGGAHITA
0ECE..0ECF  ; UNASSIGNED  # <reserved>..<reserved>
0ED0..0ED9  ; PVALID      # LAO DIG ZERO..LAO DIG NINE
0EDA..0EDB  ; UNASSIGNED  # <reserved>..<reserved>
0EDC..0EDD  ; FREE_PVAL   # LAO HO NO..LAO HO MO
0EDE..0F00  ; PVALID      # LAO LET KHMU GO..TIB SYL OM
0F01..0F0A  ; FREE_PVAL   # TIB MARK GTER YIG MGO TRUNC A..TIB
0F0B        ; PVALID      # TIB MARK INTERSYLLABIC TSHEG
0F0C..0F17  ; FREE_PVAL   # TIB MARK DELIMITER TSHEG BSTAR..TIB
0F18..0F19  ; PVALID      # TIB ASTROLOGICAL SIGN -KHYUD PA..TIB
0F1A..0F1F  ; FREE_PVAL   # TIB SIGN RDEL DKAR GCIG..TIB SIGN RD
0F20..0F29  ; PVALID      # TIB DIG ZERO..TIB DIG NINE
0F2A..0F34  ; FREE_PVAL   # TIB DIG HALF ONE..TIB MARK BSDUS R
0F35        ; PVALID      # TIB MARK NGAS BZUNG NYI ZLA
0F36        ; FREE_PVAL   # TIB MARK CARET DZUD RTAGS BZHI MIG C
0F37        ; PVALID      # TIB MARK NGAS BZUNG SGOR RTAGS
0F38        ; FREE_PVAL   # TIB MARK CHE MGO
0F39        ; PVALID      # TIB MARK TSA PHRU
0F3A..0F3D  ; FREE_PVAL   # TIB MARK GUG RTAGS GYON..TIB MARK AN
0F3E..0F42  ; PVALID      # TIB SIGN YAR TSHES..TIB LET GA
0F43        ; FREE_PVAL   # TIB LET GHA
0F44..0F47  ; PVALID      # TIB LET NGA..TIB LET JA
0F48        ; UNASSIGNED  # <reserved>
0F49..0F4C  ; PVALID      # TIB LET NYA..TIB LET DDA
0F4D        ; FREE_PVAL   # TIB LET DDHA
0F4E..0F51  ; PVALID      # TIB LET NNA..TIB LET DA
0F52        ; FREE_PVAL   # TIB LET DHA
0F53..0F56  ; PVALID      # TIB LET NA..TIB LET BA
0F57        ; FREE_PVAL   # TIB LET BHA
0F58..0F5B  ; PVALID      # TIB LET MA..TIB LET DZA
0F5C        ; FREE_PVAL   # TIB LET DZHA
0F5D..0F68  ; PVALID      # TIB LET WA..TIB LET A
0F69        ; FREE_PVAL   # TIB LET KSSA
0F6A..0F6C  ; PVALID      # TIB LET FIXED-FORM RA..TIB LET
0F6D..0F70  ; UNASSIGNED  # <reserved>..<reserved>
0F71..0F72  ; PVALID      # TIB VOW SIGN AA..TIB VOW SIGN I
0F73        ; FREE_PVAL   # TIB VOW SIGN II
0F74        ; PVALID      # TIB VOW SIGN U
0F75..0F79  ; FREE_PVAL   # TIB VOW SIGN UU..TIB VOW SIGN VO
0F7A..0F80  ; PVALID      # TIB VOW SIGN E..TIB VOW SIGN REV
0F81        ; FREE_PVAL   # TIB VOW SIGN REV II
0F82..0F84  ; PVALID      # TIB SIGN NYI ZLA NAA DA..TIB MARK H
0F85        ; FREE_PVAL   # TIB MARK PALUTA
0F86..0F8F  ; PVALID      # TIB SIGN LCI RTAGS..TIB SUBJOIN S
0F90..0F92  ; PVALID      # TIB SUBJOIN LET KA..TIB SUBJOIN
0F93        ; FREE_PVAL   # TIB SUBJOIN LET GHA
0F94..0F97  ; PVALID      # TIB SUBJOIN LET NGA..TIB SUBJOI
0F98        ; UNASSIGNED  # <reserved>
0F99..0F9C  ; PVALID      # TIB SUBJOIN LET NYA..TIB SUBJOI
0F9D        ; FREE_PVAL   # TIB SUBJOIN LET DDHA
0F9E..0FA1  ; PVALID      # TIB SUBJOIN LET NNA..TIB SUBJOI
0FA2        ; FREE_PVAL   # TIB SUBJOIN LET DHA
0FA3..0FA6  ; PVALID      # TIB SUBJOIN LET NA..TIB SUBJOIN
0FA7        ; FREE_PVAL   # TIB SUBJOIN LET BHA
0FA8..0FAB  ; PVALID      # TIB SUBJOIN LET MA..TIB SUBJOIN
0FAC        ; FREE_PVAL   # TIB SUBJOIN LET DZHA
0FAD..0FB8  ; PVALID      # TIB SUBJOIN LET WA..TIB SUBJOIN
0FB9        ; FREE_PVAL   # TIB SUBJOIN LET KSSA
0FBA..0FBC  ; PVALID      # TIB SUBJOIN LET FIXED-FORM WA..TI
0FBD        ; UNASSIGNED  # <reserved>
0FBE..0FC5  ; FREE_PVAL   # TIB KU RU KHA..TIB SYM RDO RJE
0FC6        ; PVALID      # TIB SYM PADMA GDAN
0FC7..0FCC  ; FREE_PVAL   # TIB SYM RDO RJE RGYA GRAM..TIB SY
0FCD        ; UNASSIGNED  # <reserved>
0FCE..0FDA  ; DISALLOWED  # TIB SIGN RDEL NAG RDEL DKAR..TIB MA
0FDB..0FFF  ; UNASSIGNED  # <reserved>..<reserved>
1000..1049  ; PVALID      # MYAN LET KA..MYAN DIG NINE
104A..104F  ; FREE_PVAL   # MYAN SIGN LITTLE SECTION..MYAN SYM
1050..109D  ; PVALID      # MYAN LET SHA..MYAN VOW SIGN AITON
109E..109F  ; FREE_PVAL   # MYAN SYM SHAN ONE..MYAN SYM SHAN EX
10A0..10C5  ; PVALID      # GEORG CAP LET AN..GEORG CAP LET HOE
10C6        ; UNASSIGNED  # <reserved>
10C7        ; FREE_PVAL   # GEORG CAP LET YN
10C8..10CC  ; UNASSIGNED  # <reserved>..<reserved>
10CD        ; PVALID      # GEORG CAP LET AEN
10CE..10CF  ; UNASSIGNED  # <reserved>..<reserved>
10D0..10FA  ; PVALID      # GEORG LET AN..GEORG LET AIN
10FB        ; FREE_PVAL   # GEORG PARA SEP
10FC..10FF  ; PVALID      # MOD LET GEORG AEN..GEORG LET LABIAL
1100..11FF  ; DISALLOWED  # HANGUL CHO KIYEOK..HANGUL JONG SSA
1200..1248  ; PVALID      # ETHI SYL HA..ETHI SYL QWA
1249        ; UNASSIGNED  # <reserved>
124A..124D  ; PVALID      # ETHI SYL QWI..ETHI SYL QWE
124E..124F  ; UNASSIGNED  # <reserved>..<reserved>
1250..1256  ; PVALID      # ETHI SYL QHA..ETHI SYL QHO
1257        ; UNASSIGNED  # <reserved>
1258        ; PVALID      # ETHI SYL QHWA
1259        ; UNASSIGNED  # <reserved>
125A..125D  ; PVALID      # ETHI SYL QHWI..ETHI SYL QH
125E..125F  ; UNASSIGNED  # <reserved>..<reserved>
1260..1288  ; PVALID      # ETHI SYL BA..ETHI SYL XWA
1289        ; UNASSIGNED  # <reserved>
128A..128D  ; PVALID      # ETHI SYL XWI..ETHI SYL XWE
128E..128F  ; UNASSIGNED  # <reserved>..<reserved>
1290..12B0  ; PVALID      # ETHI SYL NA..ETHI SYL KWA
12B1        ; UNASSIGNED  # <reserved>
12B2..12B5  ; PVALID      # ETHI SYL KWI..ETHI SYL KWE
12B6..12B7  ; UNASSIGNED  # <reserved>..<reserved>
12B8..12BE  ; PVALID      # ETHI SYL KXA..ETHI SYL KXO
12BF        ; UNASSIGNED  # <reserved>
12C0        ; PVALID      # ETHI SYL KXWA
12C1        ; UNASSIGNED  # <reserved>
12C2..12C5  ; PVALID      # ETHI SYL KXWI..ETHI SYL KX
12C6..12C7  ; UNASSIGNED  # <reserved>..<reserved>
12C8..12D6  ; PVALID      # ETHI SYL WA..ETHI SYL PHAR
12D7        ; UNASSIGNED  # <reserved>
12D8..1310  ; PVALID      # ETHI SYL ZA..ETHI SYL GWA
1311        ; UNASSIGNED  # <reserved>
1312..1315  ; PVALID      # ETHI SYL GWI..ETHI SYL GWE
1316..1317  ; UNASSIGNED  # <reserved>..<reserved>
1318..135A  ; PVALID      # ETHI SYL GGA..ETHI SYL FYA
135B..135C  ; UNASSIGNED  # <reserved>..<reserved>
135D..135F  ; PVALID      # ETHI COMB GEM AND VOW..ETHI COMB GE
1360..137C  ; FREE_PVAL   # ETHI SECT MARK..ETHI NUM TEN THOUS
137D..137F  ; UNASSIGNED  # <reserved>..<reserved>
1380..138F  ; PVALID      # ETHI SYL SEBATBEIT MWA..ETHI SYL PW
1390..1399  ; DISALLOWED  # ETHI TON MARK YIZET..ETHI TON MARK 
139A..139F  ; UNASSIGNED  # <reserved>..<reserved>
13A0..13F4  ; PVALID      # CHEROKEE LET A..CHEROKEE LET YV
13F5..13FF  ; UNASSIGNED  # <reserved>..<reserved>
1400        ; FREE_PVAL   # CANAD SYL HYPHEN
1401..166C  ; PVALID      # CANAD SYL E..CANAD SYL CAR
166D..166E  ; FREE_PVAL   # CANAD SYL CHI SIGN..CANAD SYLLAB
166F..167F  ; PVALID      # CANAD SYL QAI..CANAD SYL B
1680        ; FREE_PVAL   # OGHAM SPACE MARK
1681..169A  ; PVALID      # OGHAM LET BEITH..OGHAM LET PEITH
169B..169C  ; FREE_PVAL   # OGHAM FEATHER MARK..OGHAM REV FEAT
169D..169F  ; UNASSIGNED  # <reserved>..<reserved>
16A0..16EA  ; PVALID      # RUNIC LET FEHU FEOH FE F..RUNIC LET
16EB..16F0  ; FREE_PVAL   # RUNIC SINGLE PUNCT..RUNIC BELGTHOR
16F1..16FF  ; UNASSIGNED  # <reserved>..<reserved>
1700..170C  ; PVALID      # TAGALOG LET A..TAGALOG LET YA
170D        ; UNASSIGNED  # <reserved>
170E..1714  ; PVALID      # TAGALOG LET LA..TAGALOG SIGN VIRAMA
1715..171F  ; UNASSIGNED  # <reserved>..<reserved>
1720..1734  ; PVALID      # HANUNOO LET A..HANUNOO SIGN PAMUDPO
1735..1736  ; FREE_PVAL   # PHILIP SINGLE PUNCT..PHILIP DOUBLE
1737..173F  ; UNASSIGNED  # <reserved>..<reserved>
1740..1753  ; PVALID      # BUHID LET A..BUHID VOW SIGN U
1754..175F  ; UNASSIGNED  # <reserved>..<reserved>
1760..176C  ; PVALID      # TAGBANWA LET A..TAGBANWA LET YA
176D        ; UNASSIGNED  # <reserved>
176E..1770  ; PVALID      # TAGBANWA LET LA..TAGBANWA LET SA
1771        ; UNASSIGNED  # <reserved>
1772..1773  ; PVALID      # TAGBANWA VOW SIGN I..TAGBANWA VOW S
1774..177F  ; UNASSIGNED  # <reserved>..<reserved>
1780..17D3  ; PVALID      # KHMER LET KA..KHMER SIGN BATHAMASAT
17D4..17D6  ; FREE_PVAL   # KHMER SIGN KHAN..KHMER SIGN CAMNUC
17D7        ; PVALID      # KHMER SIGN LEK TOO
17D8..17DB  ; FREE_PVAL   # KHMER SIGN BEYYAL..KHMER CURR SYM R
17DC..17DD  ; PVALID      # KHMER SIGN AVAKRAHASANYA..KHMER SIG
17DE..17DF  ; UNASSIGNED  # <reserved>..<reserved>
17E0..17E9  ; PVALID      # KHMER DIG ZERO..KHMER DIG NINE
17EA..17EF  ; UNASSIGNED  # <reserved>..<reserved>
17F0..17F9  ; FREE_PVAL   # KHMER SYM LEK ATTAK SON..KHMER SYM
17FA..17FF  ; UNASSIGNED  # <reserved>..<reserved>
1800..180E  ; FREE_PVAL   # MONG BIRGA..MONG VOW SEP
180F        ; UNASSIGNED  # <reserved>
1810..1819  ; PVALID      # MONG DIG ZERO..MONG DIG NINE
181A..181F  ; UNASSIGNED  # <reserved>..<reserved>
1820..1877  ; PVALID      # MONG LET A..MONG LET MANCHU
1878..187F  ; UNASSIGNED  # <reserved>..<reserved>
1880..18AA  ; PVALID      # MONG LET ALI GALI ANUSVARA ONE..MON
18AB..18AF  ; UNASSIGNED  # <reserved>..<reserved>
18B0..18F5  ; PVALID      # CAN SYL OY..CAN SYL CA
18F6..18FF  ; UNASSIGNED  # <reserved>..<reserved>
1900..191C  ; PVALID      # LIMBU VOW-CARRIER LET..LIMBU LET HA
191D..191F  ; UNASSIGNED  # <reserved>..<reserved>
1920..192B  ; PVALID      # LIMBU VOW SIGN A..LIMBU SUBJOIN LET
192C..192F  ; UNASSIGNED  # <reserved>..<reserved>
1930..193B  ; PVALID      # LIMBU SM LET KA..LIMBU SIGN SA-I
193C..193F  ; UNASSIGNED  # <reserved>..<reserved>
1940        ; FREE_PVAL   # LIMBU SIGN LOO
1941..1943  ; UNASSIGNED  # <reserved>..<reserved>
1944..1945  ; FREE_PVAL   # LIMBU EXCLAM MARK..LIMBU QUEST MARK
1946..196D  ; PVALID      # LIMBU DIG ZERO..TAI LE LET AI
196E..196F  ; UNASSIGNED  # <reserved>..<reserved>
1970..1974  ; PVALID      # TAI LE LET TONE-2..TAI LE LET TONE-
1975..197F  ; UNASSIGNED  # <reserved>..<reserved>
1980..19AB  ; PVALID      # NEW TAI LUE LET HIGH QA..NEW TAI LU
19AC..19AF  ; UNASSIGNED  # <reserved>..<reserved>
19B0..19C9  ; PVALID      # NEW TAI LUE VOW SIGN VOW SHORT..NEW
19CA..19CF  ; UNASSIGNED  # <reserved>..<reserved>
19D0..19DA  ; PVALID      # NEW TAI LUE DIG ZERO..NEW TAI LUE THAM
19DB..19DD  ; UNASSIGNED  # <reserved>..<reserved>
19DE..19FF  ; FREE_PVAL   # NEW TAI LUE SIGN LAE..KHMER SYM DAP
1A00..1A1B  ; PVALID      # BUGIN LET KA..BUGIN VOW SIGN AE
1A1C..1A1D  ; UNASSIGNED  # <reserved>..<reserved>
1A1E..1A1F  ; FREE_PVAL   # BUGIN PALLAWA..BUGIN END OF SECTION
1A20..1A5E  ; PVALID      # TAI THAM LET HIGH KA..TAI THAM CONS
1A5F        ; UNASSIGNED  # <reserved>
1A60..1A7C  ; PVALID      # TAI THAM SIGN SAKOT..TAI THAM SIGN 
1A7D..1A7E  ; UNASSIGNED  # <reserved>..<reserved>
1A7F..1A89  ; PVALID      # TAI THAM COMB CRYPT DOT..TAI THAM D
1A8A..1A8F  ; UNASSIGNED  # <reserved>..<reserved>
1A90..1A99  ; PVALID      # TAI THAM THAM DIG ZERO..TAI THAM TH
1A9A..1A9F  ; UNASSIGNED  # <reserved>..<reserved>
1AA0..1AA6  ; FREE_PVAL   # TAI THAM SIGN WIANG..TAI THAM SIGN 
1AA7        ; PVALID      # TAI THAM SIGN MAI YAMOK
1AA8..1AAD  ; FREE_PVAL   # TAI THAM SIGN KAAN..TAI THAM SIGN C
1AAE..1AFF  ; UNASSIGNED  # <reserved>..<reserved>
1B00..1B4B  ; PVALID      # BAL SIGN ULU RICEM..BAL LET ASYURA
1B4C..1B4F  ; UNASSIGNED  # <reserved>..<reserved>
1B50..1B59  ; PVALID      # BAL DIG ZERO..BAL DIG NINE
1B5A..1B6A  ; FREE_PVAL   # BAL PANTI..BAL MUS SYM DANG
1B6B..1B73  ; PVALID      # BAL MUS SYM COMB TEGEH..BAL MUS
1B74..1B7C  ; FREE_PVAL   # BAL MUS SYM RIGHT-HAND OPEN DUG
1B7D..1B7F  ; UNASSIGNED  # <reserved>..<reserved>
1B80..1BBF  ; PVALID      # SUND SIGN PANYECEK..SUNDA LET FIN M
1BC0..1BF3  ; PVALID      # BATAK LET A..BATAK PANONGONAN
1BF4..1BFB  ; UNASSIGNED  # <reserved>..<reserved>
1BFC..1BFF  ; FREE_PVAL   # BATAK SYM BINDU NA METEK..BATAK SYM
1C00..1C37  ; PVALID      # LEPCHA LET KA..LEPCHA SIGN NUKTA
1C38..1C3A  ; UNASSIGNED  # <reserved>..<reserved>
1C3B..1C3F  ; FREE_PVAL   # LEPCHA PUNCT TA-ROL..LEPCHA PUNCT T
1C40..1C49  ; PVALID      # LEPCHA DIG ZERO..LEPCHA DIG NINE
1C4A..1C4C  ; UNASSIGNED  # <reserved>..<reserved>
1C4D..1C7D  ; PVALID      # LEPCHA LET TTA..OL CHIKI AHAD
1C7E..1C7F  ; FREE_PVAL   # OL CHIKI PUNCT MUCAAD..OL CHIKI PUN
1C80..1C9F  ; UNASSIGNED  # <reserved>..<reserved>
1CC0..1CC7  ; FREE_PVAL   # SUNDA PUNCT BINDU SURYA..SUNDA PUNC
1CC8..1CCF  ; UNASSIGNED  # <reserved>..<reserved>
1CD0..1CD2  ; PVALID      # VED TONE KARSHANA..VED TONE PRENKHA
1CD3        ; FREE_PVAL   # VED SIGN NIHSHVASA
1CD4..1CF6  ; PVALID      # VED SIGN YAJURVEDIC MID SVARITA..VE
1CF7..1CFF  ; UNASSIGNED  # <reserved>..<reserved>
1D00..1D2B  ; PVALID      # LAT LET SM CAP A..CYR LET SM
1D2C..1D2E  ; FREE_PVAL   # MOD LET CAP A..MOD LET C
1D2F        ; PVALID      # MOD LET CAP BARRED B
1D30..1D3A  ; FREE_PVAL   # MOD LET CAP D..MOD LET C
1D3B        ; PVALID      # MOD LET CAP REV N
1D3C..1D4D  ; FREE_PVAL   # MOD LET CAP O..MOD LET S
1D4E        ; PVALID      # MOD LET SM TURNED I
1D4F..1D6A  ; FREE_PVAL   # MOD LET SM K..GREEK SUB SMA
1D6B..1D77  ; PVALID      # LAT SM LET UE..LAT SM LET TU
1D78        ; FREE_PVAL   # MOD LET CYR EN
1D79..1D9A  ; PVALID      # LAT SM LET INSULAR G..LAT SM LE
1D9B..1DBF  ; FREE_PVAL   # MOD LET SM TURNED ALPHA..MOD
1DC0..1DE6  ; PVALID      # COMB DOTTED GRAVE ACCENT..COMB LAT
1DE7..1DFB  ; UNASSIGNED  # <reserved>..<reserved>
1DFC..1DFF  ; PVALID      # COMB DOUBLE INV BREVE BEL..COMB R
1E00        ; FREE_PVAL   # LAT CAP LET A W RING BEL
1E01        ; PVALID      # LAT SM LET A W RING BEL
1E02        ; FREE_PVAL   # LAT CAP LET B W DOT ABOVE
1E03        ; PVALID      # LAT SM LET B W DOT ABOVE
1E04        ; FREE_PVAL   # LAT CAP LET B W DOT BEL
1E05        ; PVALID      # LAT SM LET B W DOT BEL
1E06        ; FREE_PVAL   # LAT CAP LET B W LINE BEL
1E07        ; PVALID      # LAT SM LET B W LINE BEL
1E08        ; FREE_PVAL   # LAT CAP LET C W CEDILLA AND ACUT
1E09        ; PVALID      # LAT SM LET C W CEDILLA AND ACUTE
1E0A        ; FREE_PVAL   # LAT CAP LET D W DOT ABOVE
1E0B        ; PVALID      # LAT SM LET D W DOT ABOVE
1E0C        ; FREE_PVAL   # LAT CAP LET D W DOT BEL
1E0D        ; PVALID      # LAT SM LET D W DOT BEL
1E0E        ; FREE_PVAL   # LAT CAP LET D W LINE BEL
1E0F        ; PVALID      # LAT SM LET D W LINE BEL
1E10        ; FREE_PVAL   # LAT CAP LET D W CEDILLA
1E11        ; PVALID      # LAT SM LET D W CEDILLA
1E12        ; FREE_PVAL   # LAT CAP LET D W CIRCUMFLEX BEL
1E13        ; PVALID      # LAT SM LET D W CIRCUMFLEX BEL
1E14        ; FREE_PVAL   # LAT CAP LET E W MACRON AND GRAVE
1E15        ; PVALID      # LAT SM LET E W MACRON AND GRAVE
1E16        ; FREE_PVAL   # LAT CAP LET E W MACRON AND ACUTE
1E17        ; PVALID      # LAT SM LET E W MACRON AND ACUTE
1E18        ; FREE_PVAL   # LAT CAP LET E W CIRCUMFLEX BEL
1E19        ; PVALID      # LAT SM LET E W CIRCUMFLEX BEL
1E1A        ; FREE_PVAL   # LAT CAP LET E W TILDE BEL
1E1B        ; PVALID      # LAT SM LET E W TILDE BEL
1E1C        ; FREE_PVAL   # LAT CAP LET E W CEDILLA AND BREV
1E1D        ; PVALID      # LAT SM LET E W CEDILLA AND BREVE
1E1E        ; FREE_PVAL   # LAT CAP LET F W DOT ABOVE
1E1F        ; PVALID      # LAT SM LET F W DOT ABOVE
1E20        ; FREE_PVAL   # LAT CAP LET G W MACRON
1E21        ; PVALID      # LAT SM LET G W MACRON
1E22        ; FREE_PVAL   # LAT CAP LET H W DOT ABOVE
1E23        ; PVALID      # LAT SM LET H W DOT ABOVE
1E24        ; FREE_PVAL   # LAT CAP LET H W DOT BEL
1E25        ; PVALID      # LAT SM LET H W DOT BEL
1E26        ; FREE_PVAL   # LAT CAP LET H W DIAERESIS
1E27        ; PVALID      # LAT SM LET H W DIAERESIS
1E28        ; FREE_PVAL   # LAT CAP LET H W CEDILLA
1E29        ; PVALID      # LAT SM LET H W CEDILLA
1E2A        ; FREE_PVAL   # LAT CAP LET H W BREVE BEL
1E2B        ; PVALID      # LAT SM LET H W BREVE BEL
1E2C        ; FREE_PVAL   # LAT CAP LET I W TILDE BEL
1E2D        ; PVALID      # LAT SM LET I W TILDE BEL
1E2E        ; FREE_PVAL   # LAT CAP LET I W DIAERESIS AND AC
1E2F        ; PVALID      # LAT SM LET I W DIAERESIS AND ACUT
1E30        ; FREE_PVAL   # LAT CAP LET K W ACUTE
1E31        ; PVALID      # LAT SM LET K W ACUTE
1E32        ; FREE_PVAL   # LAT CAP LET K W DOT BEL
1E33        ; PVALID      # LAT SM LET K W DOT BEL
1E34        ; FREE_PVAL   # LAT CAP LET K W LINE BEL
1E35        ; PVALID      # LAT SM LET K W LINE BEL
1E36        ; FREE_PVAL   # LAT CAP LET L W DOT BEL
1E37        ; PVALID      # LAT SM LET L W DOT BEL
1E38        ; FREE_PVAL   # LAT CAP LET L W DOT BEL AND MA
1E39        ; PVALID      # LAT SM LET L W DOT BEL AND MACR
1E3A        ; FREE_PVAL   # LAT CAP LET L W LINE BEL
1E3B        ; PVALID      # LAT SM LET L W LINE BEL
1E3C        ; FREE_PVAL   # LAT CAP LET L W CIRCUMFLEX BEL
1E3D        ; PVALID      # LAT SM LET L W CIRCUMFLEX BEL
1E3E        ; FREE_PVAL   # LAT CAP LET M W ACUTE
1E3F        ; PVALID      # LAT SM LET M W ACUTE
1E40        ; FREE_PVAL   # LAT CAP LET M W DOT ABOVE
1E41        ; PVALID      # LAT SM LET M W DOT ABOVE
1E42        ; FREE_PVAL   # LAT CAP LET M W DOT BEL
1E43        ; PVALID      # LAT SM LET M W DOT BEL
1E44        ; FREE_PVAL   # LAT CAP LET N W DOT ABOVE
1E45        ; PVALID      # LAT SM LET N W DOT ABOVE
1E46        ; FREE_PVAL   # LAT CAP LET N W DOT BEL
1E47        ; PVALID      # LAT SM LET N W DOT BEL
1E48        ; FREE_PVAL   # LAT CAP LET N W LINE BEL
1E49        ; PVALID      # LAT SM LET N W LINE BEL
1E4A        ; FREE_PVAL   # LAT CAP LET N W CIRCUMFLEX BEL
1E4B        ; PVALID      # LAT SM LET N W CIRCUMFLEX BEL
1E4C        ; FREE_PVAL   # LAT CAP LET O W TILDE AND ACUTE
1E4D        ; PVALID      # LAT SM LET O W TILDE AND ACUTE
1E4E        ; FREE_PVAL   # LAT CAP LET O W TILDE AND DIAERE
1E4F        ; PVALID      # LAT SM LET O W TILDE AND DIAERESI
1E50        ; FREE_PVAL   # LAT CAP LET O W MACRON AND GRAVE
1E51        ; PVALID      # LAT SM LET O W MACRON AND GRAVE
1E52        ; FREE_PVAL   # LAT CAP LET O W MACRON AND ACUTE
1E53        ; PVALID      # LAT SM LET O W MACRON AND ACUTE
1E54        ; FREE_PVAL   # LAT CAP LET P W ACUTE
1E55        ; PVALID      # LAT SM LET P W ACUTE
1E56        ; FREE_PVAL   # LAT CAP LET P W DOT ABOVE
1E57        ; PVALID      # LAT SM LET P W DOT ABOVE
1E58        ; FREE_PVAL   # LAT CAP LET R W DOT ABOVE
1E59        ; PVALID      # LAT SM LET R W DOT ABOVE
1E5A        ; FREE_PVAL   # LAT CAP LET R W DOT BEL
1E5B        ; PVALID      # LAT SM LET R W DOT BEL
1E5C        ; FREE_PVAL   # LAT CAP LET R W DOT BEL AND MA
1E5D        ; PVALID      # LAT SM LET R W DOT BEL AND MACR
1E5E        ; FREE_PVAL   # LAT CAP LET R W LINE BEL
1E5F        ; PVALID      # LAT SM LET R W LINE BEL
1E60        ; FREE_PVAL   # LAT CAP LET S W DOT ABOVE
1E61        ; PVALID      # LAT SM LET S W DOT ABOVE
1E62        ; FREE_PVAL   # LAT CAP LET S W DOT BEL
1E63        ; PVALID      # LAT SM LET S W DOT BEL
1E64        ; FREE_PVAL   # LAT CAP LET S W ACUTE AND DOT AB
1E65        ; PVALID      # LAT SM LET S W ACUTE AND DOT ABOV
1E66        ; FREE_PVAL   # LAT CAP LET S W CARON AND DOT AB
1E67        ; PVALID      # LAT SM LET S W CARON AND DOT ABOV
1E68        ; FREE_PVAL   # LAT CAP LET S W DOT BEL AND DO
1E69        ; PVALID      # LAT SM LET S W DOT BEL AND DOT
1E6A        ; FREE_PVAL   # LAT CAP LET T W DOT ABOVE
1E6B        ; PVALID      # LAT SM LET T W DOT ABOVE
1E6C        ; FREE_PVAL   # LAT CAP LET T W DOT BEL
1E6D        ; PVALID      # LAT SM LET T W DOT BEL
1E6E        ; FREE_PVAL   # LAT CAP LET T W LINE BEL
1E6F        ; PVALID      # LAT SM LET T W LINE BEL
1E70        ; FREE_PVAL   # LAT CAP LET T W CIRCUMFLEX BEL
1E71        ; PVALID      # LAT SM LET T W CIRCUMFLEX BEL
1E72        ; FREE_PVAL   # LAT CAP LET U W DIAERESIS BEL
1E73        ; PVALID      # LAT SM LET U W DIAERESIS BEL
1E74        ; FREE_PVAL   # LAT CAP LET U W TILDE BEL
1E75        ; PVALID      # LAT SM LET U W TILDE BEL
1E76        ; FREE_PVAL   # LAT CAP LET U W CIRCUMFLEX BEL
1E77        ; PVALID      # LAT SM LET U W CIRCUMFLEX BEL
1E78        ; FREE_PVAL   # LAT CAP LET U W TILDE AND ACUTE
1E79        ; PVALID      # LAT SM LET U W TILDE AND ACUTE
1E7A        ; FREE_PVAL   # LAT CAP LET U W MACRON AND DIAER
1E7B        ; PVALID      # LAT SM LET U W MACRON AND DIAERES
1E7C        ; FREE_PVAL   # LAT CAP LET V W TILDE
1E7D        ; PVALID      # LAT SM LET V W TILDE
1E7E        ; FREE_PVAL   # LAT CAP LET V W DOT BEL
1E7F        ; PVALID      # LAT SM LET V W DOT BEL
1E80        ; FREE_PVAL   # LAT CAP LET W W GRAVE
1E81        ; PVALID      # LAT SM LET W W GRAVE
1E82        ; FREE_PVAL   # LAT CAP LET W W ACUTE
1E83        ; PVALID      # LAT SM LET W W ACUTE
1E84        ; FREE_PVAL   # LAT CAP LET W W DIAERESIS
1E85        ; PVALID      # LAT SM LET W W DIAERESIS
1E86        ; FREE_PVAL   # LAT CAP LET W W DOT ABOVE
1E87        ; PVALID      # LAT SM LET W W DOT ABOVE
1E88        ; FREE_PVAL   # LAT CAP LET W W DOT BEL
1E89        ; PVALID      # LAT SM LET W W DOT BEL
1E8A        ; FREE_PVAL   # LAT CAP LET X W DOT ABOVE
1E8B        ; PVALID      # LAT SM LET X W DOT ABOVE
1E8C        ; FREE_PVAL   # LAT CAP LET X W DIAERESIS
1E8D        ; PVALID      # LAT SM LET X W DIAERESIS
1E8E        ; FREE_PVAL   # LAT CAP LET Y W DOT ABOVE
1E8F        ; PVALID      # LAT SM LET Y W DOT ABOVE
1E90        ; FREE_PVAL   # LAT CAP LET Z W CIRCUMFLEX
1E91        ; PVALID      # LAT SM LET Z W CIRCUMFLEX
1E92        ; FREE_PVAL   # LAT CAP LET Z W DOT BEL
1E93        ; PVALID      # LAT SM LET Z W DOT BEL
1E94        ; FREE_PVAL   # LAT CAP LET Z W LINE BEL
1E95..1E99  ; PVALID      # LAT SM LET Z W LINE BEL..LAT
1E9A..1E9B  ; FREE_PVAL   # LAT SM LET A W RIGHT HALF RING..L
1E9C..1E9D  ; PVALID      # LAT SM LET LONG S W DIAGONAL STRO
1E9E        ; FREE_PVAL   # LAT CAP LET SHARP S
1E9F        ; PVALID      # LAT SM LET DELTA
1EA0        ; FREE_PVAL   # LAT CAP LET A W DOT BEL
1EA1        ; PVALID      # LAT SM LET A W DOT BEL
1EA2        ; FREE_PVAL   # LAT CAP LET A W HOOK ABOVE
1EA3        ; PVALID      # LAT SM LET A W HOOK ABOVE
1EA4        ; FREE_PVAL   # LAT CAP LET A W CIRCUMFLEX AND A
1EA5        ; PVALID      # LAT SM LET A W CIRCUMFLEX AND ACU
1EA6        ; FREE_PVAL   # LAT CAP LET A W CIRCUMFLEX AND G
1EA7        ; PVALID      # LAT SM LET A W CIRCUMFLEX AND GRA
1EA8        ; FREE_PVAL   # LAT CAP LET A W CIRCUMFLEX AND H
1EA9        ; PVALID      # LAT SM LET A W CIRCUMFLEX AND HOO
1EAA        ; FREE_PVAL   # LAT CAP LET A W CIRCUMFLEX AND T
1EAB        ; PVALID      # LAT SM LET A W CIRCUMFLEX AND TIL
1EAC        ; FREE_PVAL   # LAT CAP LET A W CIRCUMFLEX AND D
1EAD        ; PVALID      # LAT SM LET A W CIRCUMFLEX AND DOT
1EAE        ; FREE_PVAL   # LAT CAP LET A W BREVE AND ACUTE
1EAF        ; PVALID      # LAT SM LET A W BREVE AND ACUTE
1EB0        ; FREE_PVAL   # LAT CAP LET A W BREVE AND GRAVE
1EB1        ; PVALID      # LAT SM LET A W BREVE AND GRAVE
1EB2        ; FREE_PVAL   # LAT CAP LET A W BREVE AND HOOK A
1EB3        ; PVALID      # LAT SM LET A W BREVE AND HOOK ABO
1EB4        ; FREE_PVAL   # LAT CAP LET A W BREVE AND TILDE
1EB5        ; PVALID      # LAT SM LET A W BREVE AND TILDE
1EB6        ; FREE_PVAL   # LAT CAP LET A W BREVE AND DOT BE
1EB7        ; PVALID      # LAT SM LET A W BREVE AND DOT BELO
1EB8        ; FREE_PVAL   # LAT CAP LET E W DOT BEL
1EB9        ; PVALID      # LAT SM LET E W DOT BEL
1EBA        ; FREE_PVAL   # LAT CAP LET E W HOOK ABOVE
1EBB        ; PVALID      # LAT SM LET E W HOOK ABOVE
1EBC        ; FREE_PVAL   # LAT CAP LET E W TILDE
1EBD        ; PVALID      # LAT SM LET E W TILDE
1EBE        ; FREE_PVAL   # LAT CAP LET E W CIRCUMFLEX AND A
1EBF        ; PVALID      # LAT SM LET E W CIRCUMFLEX AND ACU
1EC0        ; FREE_PVAL   # LAT CAP LET E W CIRCUMFLEX AND G
1EC1        ; PVALID      # LAT SM LET E W CIRCUMFLEX AND GRA
1EC2        ; FREE_PVAL   # LAT CAP LET E W CIRCUMFLEX AND H
1EC3        ; PVALID      # LAT SM LET E W CIRCUMFLEX AND HOO
1EC4        ; FREE_PVAL   # LAT CAP LET E W CIRCUMFLEX AND T
1EC5        ; PVALID      # LAT SM LET E W CIRCUMFLEX AND TIL
1EC6        ; FREE_PVAL   # LAT CAP LET E W CIRCUMFLEX AND D
1EC7        ; PVALID      # LAT SM LET E W CIRCUMFLEX AND DOT
1EC8        ; FREE_PVAL   # LAT CAP LET I W HOOK ABOVE
1EC9        ; PVALID      # LAT SM LET I W HOOK ABOVE
1ECA        ; FREE_PVAL   # LAT CAP LET I W DOT BEL
1ECB        ; PVALID      # LAT SM LET I W DOT BEL
1ECC        ; FREE_PVAL   # LAT CAP LET O W DOT BEL
1ECD        ; PVALID      # LAT SM LET O W DOT BEL
1ECE        ; FREE_PVAL   # LAT CAP LET O W HOOK ABOVE
1ECF        ; PVALID      # LAT SM LET O W HOOK ABOVE
1ED0        ; FREE_PVAL   # LAT CAP LET O W CIRCUMFLEX AND A
1ED1        ; PVALID      # LAT SM LET O W CIRCUMFLEX AND ACU
1ED2        ; FREE_PVAL   # LAT CAP LET O W CIRCUMFLEX AND G
1ED3        ; PVALID      # LAT SM LET O W CIRCUMFLEX AND GRA
1ED4        ; FREE_PVAL   # LAT CAP LET O W CIRCUMFLEX AND H
1ED5        ; PVALID      # LAT SM LET O W CIRCUMFLEX AND HOO
1ED6        ; FREE_PVAL   # LAT CAP LET O W CIRCUMFLEX AND T
1ED7        ; PVALID      # LAT SM LET O W CIRCUMFLEX AND TIL
1ED8        ; FREE_PVAL   # LAT CAP LET O W CIRCUMFLEX AND D
1ED9        ; PVALID      # LAT SM LET O W CIRCUMFLEX AND DOT
1EDA        ; FREE_PVAL   # LAT CAP LET O W HORN AND ACUTE
1EDB        ; PVALID      # LAT SM LET O W HORN AND ACUTE
1EDC        ; FREE_PVAL   # LAT CAP LET O W HORN AND GRAVE
1EDD        ; PVALID      # LAT SM LET O W HORN AND GRAVE
1EDE        ; FREE_PVAL   # LAT CAP LET O W HORN AND HOOK AB
1EDF        ; PVALID      # LAT SM LET O W HORN AND HOOK ABOV
1EE0        ; FREE_PVAL   # LAT CAP LET O W HORN AND TILDE
1EE1        ; PVALID      # LAT SM LET O W HORN AND TILDE
1EE2        ; FREE_PVAL   # LAT CAP LET O W HORN AND DOT BEL
1EE3        ; PVALID      # LAT SM LET O W HORN AND DOT BEL
1EE4        ; FREE_PVAL   # LAT CAP LET U W DOT BEL
1EE5        ; PVALID      # LAT SM LET U W DOT BEL
1EE6        ; FREE_PVAL   # LAT CAP LET U W HOOK ABOVE
1EE7        ; PVALID      # LAT SM LET U W HOOK ABOVE
1EE8        ; FREE_PVAL   # LAT CAP LET U W HORN AND ACUTE
1EE9        ; PVALID      # LAT SM LET U W HORN AND ACUTE
1EEA        ; FREE_PVAL   # LAT CAP LET U W HORN AND GRAVE
1EEB        ; PVALID      # LAT SM LET U W HORN AND GRAVE
1EEC        ; FREE_PVAL   # LAT CAP LET U W HORN AND HOOK AB
1EED        ; PVALID      # LAT SM LET U W HORN AND HOOK ABOV
1EEE        ; FREE_PVAL   # LAT CAP LET U W HORN AND TILDE
1EEF        ; PVALID      # LAT SM LET U W HORN AND TILDE
1EF0        ; FREE_PVAL   # LAT CAP LET U W HORN AND DOT BEL
1EF1        ; PVALID      # LAT SM LET U W HORN AND DOT BEL
1EF2        ; FREE_PVAL   # LAT CAP LET Y W GRAVE
1EF3        ; PVALID      # LAT SM LET Y W GRAVE
1EF4        ; FREE_PVAL   # LAT CAP LET Y W DOT BEL
1EF5        ; PVALID      # LAT SM LET Y W DOT BEL
1EF6        ; FREE_PVAL   # LAT CAP LET Y W HOOK ABOVE
1EF7        ; PVALID      # LAT SM LET Y W HOOK ABOVE
1EF8        ; FREE_PVAL   # LAT CAP LET Y W TILDE
1EF9        ; PVALID      # LAT SM LET Y W TILDE
1EFA        ; FREE_PVAL   # LAT CAP LET MIDDLE-WELSH LL
1EFB        ; PVALID      # LAT SM LET MIDDLE-WELSH LL
1EFC        ; FREE_PVAL   # LAT CAP LET MIDDLE-WELSH V
1EFD        ; PVALID      # LAT SM LET MIDDLE-WELSH V
1EFE        ; FREE_PVAL   # LAT CAP LET Y W LOOP
1EFF..1F07  ; PVALID      # LAT SM LET Y W LOOP..GREEK SM LET
1F08..1F0F  ; FREE_PVAL   # GREEK CAP LET ALPHA W PSILI..GREEK
1F10..1F15  ; PVALID      # GREEK SM LET EPSILON W PSILI..GREEK
1F16..1F17  ; UNASSIGNED  # <reserved>..<reserved>
1F18..1F1D  ; FREE_PVAL   # GREEK CAP LET EPSILON W PSILI..GRE
1F1E..1F1F  ; UNASSIGNED  # <reserved>..<reserved>
1F20..1F27  ; PVALID      # GREEK SM LET ETA W PSILI..GREEK SMA
1F28..1F2F  ; FREE_PVAL   # GREEK CAP LET ETA W PSILI..GREEK C
1F30..1F37  ; PVALID      # GREEK SM LET IOTA W PSILI..GREEK SM
1F38..1F3F  ; FREE_PVAL   # GREEK CAP LET IOTA W PSILI..GREEK
1F40..1F45  ; PVALID      # GREEK SM LET OMICRON W PSILI..GREEK
1F46..1F47  ; UNASSIGNED  # <reserved>..<reserved>
1F48..1F4D  ; FREE_PVAL   # GREEK CAP LET OMICRON W PSILI..GRE
1F4E..1F4F  ; UNASSIGNED  # <reserved>..<reserved>
1F50..1F57  ; PVALID      # GREEK SM LET UPSILON W PSILI..GREEK
1F58        ; UNASSIGNED  # <reserved>
1F59        ; FREE_PVAL   # GREEK CAP LET UPSILON W DASIA
1F5A        ; UNASSIGNED  # <reserved>
1F5B        ; FREE_PVAL   # GREEK CAP LET UPSILON W DASIA AND
1F5C        ; UNASSIGNED  # <reserved>
1F5D        ; FREE_PVAL   # GREEK CAP LET UPSILON W DASIA AND
1F5E        ; UNASSIGNED  # <reserved>
1F5F        ; FREE_PVAL   # GREEK CAP LET UPSILON W DASIA AND
1F60..1F67  ; PVALID      # GREEK SM LET OMEGA W PSILI..GREEK S
1F68..1F6F  ; FREE_PVAL   # GREEK CAP LET OMEGA W PSILI..GREEK
1F70        ; PVALID      # GREEK SM LET ALPHA W VARIA
1F71        ; FREE_PVAL   # GREEK SM LET ALPHA W OXIA
1F72        ; PVALID      # GREEK SM LET EPSILON W VARIA
1F73        ; FREE_PVAL   # GREEK SM LET EPSILON W OXIA
1F74        ; PVALID      # GREEK SM LET ETA W VARIA
1F75        ; FREE_PVAL   # GREEK SM LET ETA W OXIA
1F76        ; PVALID      # GREEK SM LET IOTA W VARIA
1F77        ; FREE_PVAL   # GREEK SM LET IOTA W OXIA
1F78        ; PVALID      # GREEK SM LET OMICRON W VARIA
1F79        ; FREE_PVAL   # GREEK SM LET OMICRON W OXIA
1F7A        ; PVALID      # GREEK SM LET UPSILON W VARIA
1F7B        ; FREE_PVAL   # GREEK SM LET UPSILON W OXIA
1F7C        ; PVALID      # GREEK SM LET OMEGA W VARIA
1F7D        ; FREE_PVAL   # GREEK SM LET OMEGA W OXIA
1F7E..1F7F  ; UNASSIGNED  # <reserved>..<reserved>
1F80..1FAF  ; FREE_PVAL   # GREEK SM LET ALPHA W PSILI AND YPOG
1FB0..1FB1  ; PVALID      # GREEK SM LET ALPHA W VRACHY..GREEK
1FB2..1FB4  ; FREE_PVAL   # GREEK SM LET ALPHA W VARIA AND YPOG
1FB5        ; UNASSIGNED  # <reserved>
1FB6        ; PVALID      # GREEK SM LET ALPHA W PERISPOMENI
1FB7..1FC4  ; FREE_PVAL   # GREEK SM LET ALPHA W PERISPOMENI AN
1FC5        ; UNASSIGNED  # <reserved>
1FC6        ; PVALID      # GREEK SM LET ETA W PERISPOMENI
1FC7..1FCF  ; FREE_PVAL   # GREEK SM LET ETA W PERISPOMENI AND
1FD0..1FD2  ; PVALID      # GREEK SM LET IOTA W VRACHY..GREEK S
1FD3        ; FREE_PVAL   # GREEK SM LET IOTA W DIALYTIKA AND O
1FD4..1FD5  ; UNASSIGNED  # <reserved>..<reserved>
1FD6..1FD7  ; PVALID      # GREEK SM LET IOTA W PERISPOMENI..GR
1FD8..1FDB  ; FREE_PVAL   # GREEK CAP LET IOTA W VRACHY..GREEK
1FDC        ; UNASSIGNED  # <reserved>
1FDD..1FDF  ; FREE_PVAL   # GREEK DASIA AND VARIA..GREEK DASIA
1FE0..1FE2  ; PVALID      # GREEK SM LET UPSILON W VRACHY..GREE
1FE3        ; FREE_PVAL   # GREEK SM LET UPSILON W DIALYTIKA AN
1FE4..1FE7  ; PVALID      # GREEK SM LET RHO W PSILI..GREEK SMA
1FE8..1FEF  ; FREE_PVAL   # GREEK CAP LET UPSILON W VRACHY..GR
1FF0..1FF1  ; UNASSIGNED  # <reserved>..<reserved>
1FF2..1FF4  ; FREE_PVAL   # GREEK SM LET OMEGA W VARIA AND YPOG
1FF5        ; UNASSIGNED  # <reserved>
1FF6        ; PVALID      # GREEK SM LET OMEGA W PERISPOMENI
1FF7..1FFE  ; FREE_PVAL   # GREEK SM LET OMEGA W PERISPOMENI AN
1FFF        ; UNASSIGNED  # <reserved>
2000..200A  ; FREE_PVAL   # EN QUAD..HAIR SPACE
200B        ; DISALLOWED  # ZERO WIDTH SPACE
200C..200D  ; CONTEXTJ    # ZERO WIDTH NON-JOINER..ZERO WIDTH J
200E..200F  ; DISALLOWED  # LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT M
2010..2027  ; FREE_PVAL   # HYPHEN..HYPHENATION POINT
2028..202E  ; DISALLOWED  # LINE SEP..RIGHT-TO-LEFT OVERRIDE
202F..205F  ; FREE_PVAL   # NARROW NO-BREAK SPACE..MED MATH SP
2060..2064  ; DISALLOWED  # WORD JOINER..INVISIBLE PLUS
2065..2069  ; UNASSIGNED  # <reserved>..<reserved>
206A..206F  ; DISALLOWED  # INHIBIT SYMM SWAP..NOM DIGIT SHAPES
2070..2071  ; FREE_PVAL   # SUPER ZERO..SUPER LAT SM LET I
2072..2073  ; UNASSIGNED  # <reserved>..<reserved>
2074..208E  ; FREE_PVAL   # SUPER FOUR..SUB RIGHT PARENTHESIS
208F        ; UNASSIGNED  # <reserved>
2090..209C  ; FREE_PVAL   # LAT SUB SM LET A..LAT SUB SM LET T
2095..209F  ; UNASSIGNED  # <reserved>..<reserved>
20A0..20B9  ; FREE_PVAL   # EURO-CURRENCY SIGN..INDIAN RUPEE SI
20BA..20CF  ; UNASSIGNED  # <reserved>..<reserved>
20D0..20F0  ; FREE_PVAL   # COMB LEFT HARPOON ABOVE..COMB ASTE
20F1..20FF  ; UNASSIGNED  # <reserved>..<reserved>
2100..214D  ; FREE_PVAL   # ACCOUNT OF..AKTIESELSKAB
214E        ; PVALID      # TURNED SM F
214F..2183  ; DISALLOWED  # SYM FOR SAMAR SOURCE..ROM NUM REVER
2184        ; PVALID      # LAT SM LET REV C
2185..2189  ; FREE_PVAL   # ROM NUM SIX LATE FORM..VULGAR FRACT
218A..218F  ; UNASSIGNED  # <reserved>..<reserved>
2190..23F3  ; FREE_PVAL   # LEFTWARDS ARROW..HOURGLASS WITH FLO
23F4..23FF  ; UNASSIGNED  # <reserved>..<reserved>
2400..2426  ; FREE_PVAL   # SYM FOR NULL..SYM FOR SUB FORM
2427..243F  ; UNASSIGNED  # <reserved>..<reserved>
2440..244A  ; FREE_PVAL   # OCR HOOK..OCR DOUBLE BACKSLASH
244B..245F  ; UNASSIGNED  # <reserved>..<reserved>
2460..26FF  ; FREE_PVAL   # CIRCLED DIG ONE..WHITE FLAG W HORIZ
2700        ; UNASSIGNED  # <reserved>
2701..2B4C  ; FREE_PVAL   # UP BLADE SCISSORS..RIGHTWARDS ARROW
2B4D..2B4F  ; UNASSIGNED  # <reserved>..<reserved>
2B50..2B59  ; FREE_PVAL   # WHITE MEDIUM STAR..HEAVY CIRCLED SA
2B5A..2BFF  ; UNASSIGNED  # <reserved>..<reserved>
2C00..2C2E  ; PVALID      # GLAG CAP LET AZU..GLAG CA
2C2F        ; UNASSIGNED  # <reserved>
2C30..2C5E  ; PVALID      # GLAG SM LET AZU..GLAG SMAL
2C5F        ; UNASSIGNED  # <reserved>
2C60..2CF3  ; PVALID      # LAT CAP LET L W DOUBLE BAR..COPT SM
2CF4..2CF8  ; UNASSIGNED  # <reserved>..<reserved>
2CF9..2CFF  ; FREE_PVAL   # COPT OLD NUB FULL STOP..COPT MORPHO
2D00..2D25  ; PVALID      # GEORG SM LET AN..GEORG SM LET
2D26        ; UNASSIGNED  # <reserved>
2D27        ; PVALID      # GEORG SM LET YN
2D28..2D2C  ; UNASSIGNED  # <reserved>..<reserved>
2D2D        ; PVALID      # GEORG SM LET AEN
2D2E..2D2F  ; UNASSIGNED  # <reserved>..<reserved>
2D30..2D67  ; PVALID      # TIFINAGH LET YA..TIFINAGH LETTER YO
2D68..2D6E  ; UNASSIGNED  # <reserved>..<reserved>
2D6F        ; PVALID      # TIFINAGH MOD LET LABIALIZATION MARK
2D70..2D7F  ; UNASSIGNED  # <reserved>..<reserved>
2D80..2D96  ; PVALID      # ETHI SYL LOA..ETHI SYL GGW
2D97..2D9F  ; UNASSIGNED  # <reserved>..<reserved>
2DA0..2DA6  ; PVALID      # ETHI SYL SSA..ETHI SYL SSO
2DA7        ; UNASSIGNED  # <reserved>
2DA8..2DAE  ; PVALID      # ETHI SYL CCA..ETHI SYL CCO
2DAF        ; UNASSIGNED  # <reserved>
2DB0..2DB6  ; PVALID      # ETHI SYL ZZA..ETHI SYL ZZO
2DB7        ; UNASSIGNED  # <reserved>
2DB8..2DBE  ; PVALID      # ETHI SYL CCHA..ETHI SYL CC
2DBF        ; UNASSIGNED  # <reserved>
2DC0..2DC6  ; PVALID      # ETHI SYL QYA..ETHI SYL QYO
2DC7        ; UNASSIGNED  # <reserved>
2DC8..2DCE  ; PVALID      # ETHI SYL KYA..ETHI SYL KYO
2DCF        ; UNASSIGNED  # <reserved>
2DD0..2DD6  ; PVALID      # ETHI SYL XYA..ETHI SYL XYO
2DD7        ; UNASSIGNED  # <reserved>
2DD8..2DDE  ; PVALID      # ETHI SYL GYA..ETHI SYL GYO
2DDF        ; UNASSIGNED  # <reserved>
2DE0..2DFF  ; PVALID      # COMB CYR LET BE..COMB CYRI
2E00..2E2E  ; FREE_PVAL   # RIGHT ANGLE SUB MARK..REV QUEST MAR
2E2F        ; PVALID      # VERT TILDE
2E30..2E3B  ; FREE_PVAL   # RING PNT..THREE-EM DASH
2E3C..2E7F  ; UNASSIGNED  # <reserved>..<reserved>
2E80..2E99  ; FREE_PVAL   # CJK RAD REPEAT..CJK RAD RAP
2E9A        ; UNASSIGNED  # <reserved>
2E9B..2EF3  ; FREE_PVAL   # CJK RAD CHOKE..CJK RAD C-SIMPLIFIED
2EF4..2EFF  ; UNASSIGNED  # <reserved>..<reserved>
2F00..2FD5  ; FREE_PVAL   # KANGXI RAD ONE..KANGXI RAD FLUTE
2FD6..2FEF  ; UNASSIGNED  # <reserved>..<reserved>
2FF0..2FFB  ; FREE_PVAL   # IDEO DESC CHAR LEFT TO RIGHT..IDEO
2FFC..2FFF  ; UNASSIGNED  # <reserved>..<reserved>
3000..3004  ; FREE_PVAL   # IDEO SPACE..JAPAN INDUST STAND
3005..3007  ; PVALID      # IDEO ITER MARK..IDEO NUMB ZERO
3008..3029  ; FREE_PVAL   # LEFT ANGLE BRACKET..HANGZH NUM NINE
302A..302D  ; PVALID      # IDEO LEVEL TONE MARK..IDEO ENT
302E..302F  ; FREE_PVAL   # HANGUL SING DOT TONE MARK..WAVY DAS
3031..3035  ; DISALLOWED  # VERT KANA REP MARK..VERT KANA REP M
3036..303B  ; FREE_PVAL   # CIRCLED POSTAL MARK..HANGZH NUM THI
303B        ; DISALLOWED  # VERT IDEO ITER MARK
303C        ; PVALID      # MASU MARK
303D..303F  ; DISALLOWED  # PART ALTER MARK..IDEO HALF FILL
3040        ; UNASSIGNED  # <reserved>
3041..3096  ; PVALID      # HIRAGANA LET SM A..HIRAGANA LET SMA
3097..3098  ; UNASSIGNED  # <reserved>..<reserved>
3099..309A  ; PVALID      # COMB KAT-HIR VOICED SOUND
309B..309C  ; FREE_PVAL   # KAT-HIR VOICED SOUND MARK..KAT-HIR
309D..309E  ; PVALID      # HIRAGANA ITER MARK..HIRAGANA VOICED
309F..30A0  ; FREE_PVAL   # HIRAGANA DIGRAPH YORI..KAT-HIR DOU
30A1..30FA  ; PVALID      # KATAKANA LET SM A..KATAKANA LET VO
30FB        ; CONTEXTO    # KATAKANA MIDDLE DOT
30FC..30FE  ; PVALID      # KAT-HIR PROLONGED SOUND MARK..KATA
30FF        ; FREE_PVAL   # KATAKANA DIGRAPH KOTO
3100..3104  ; UNASSIGNED  # <reserved>..<reserved>
3105..312D  ; PVALID      # BOPOMOFO LET B..BOPOMOFO LET IH
312E..3130  ; UNASSIGNED  # <reserved>..<reserved>
3131..318E  ; DISALLOWED  # HANGUL LET KIYEOK..HANGUL LET ARAEA
318F        ; UNASSIGNED  # <reserved>
3190..319F  ; FREE_PVAL   # IDEO ANNO LINK MARK..IDEO ANNO MAN 
31A0..31BA  ; PVALID      # BOPOMOFO LET BU..BOPOMOFO LET ZY
31BB..31BF  ; UNASSIGNED  # <reserved>..<reserved>
31C0..31E3  ; FREE_PVAL   # CJK STROKE T..CJK STROKE Q
31E4..31EF  ; UNASSIGNED  # <reserved>..<reserved>
31F0..31FF  ; PVALID      # KATAKANA LET SM KU..KATAKANA LET SM
3200..321E  ; FREE_PVAL   # PAREN HANGUL KIYEOK..PAREN KOREAN C
321F        ; UNASSIGNED  # <reserved>
3220..32FE  ; FREE_PVAL   # PAREN IDEO ONE..CIRCLED KATAKANA WO
32FF        ; UNASSIGNED  # <reserved>
3300..33FF  ; FREE_PVAL   # SQUARE APAATO..SQUARE GAL
3400..4DB5  ; PVALID      # <CJK Ideograph Extension A>..<CJK I
4DB6..4DBF  ; UNASSIGNED  # <reserved>..<reserved>
4DC0..4DFF  ; FREE_PVAL   # HEX FOR THE CREATIVE HEAVEN..HEX FO
4E00..9FCC  ; PVALID      # <CJK Ideograph, First>..<CJK Ideogr
9FCE..9FFF  ; UNASSIGNED  # <reserved>..<reserved>
A000..A48C  ; PVALID      # YI SYL IT..YI SYL YYR
A48D..A48F  ; UNASSIGNED  # <reserved>..<reserved>
A490..A4C6  ; FREE_PVAL   # YI RAD QOT..YI RAD KE
A4C7..A4CF  ; UNASSIGNED  # <reserved>..<reserved>
A4D0..A4FD  ; PVALID      # LISU LET BA..LISU LET TONE MYA JEU
A4FE..A4FF  ; FREE_PVAL   # LISU PUNCT COMMA..LISU PUNCT FUL
A500..A60C  ; PVALID      # VAI SYL EE..VAI SYL LENENER
A60D..A60F  ; FREE_PVAL   # VAI COMMA..VAI QUEST MARK
A610..A62B  ; PVALID      # VAI SYL NDOLE FA..VAI SYL NDOLE DO
A62C..A63F  ; UNASSIGNED  # <reserved>..<reserved>
A640..A66F  ; PVALID      # CYR CAP LET ZEMLYA..COMB CYR VZMET
A670..A673  ; FREE_PVAL   # COMB CYR TEN MILLIONS SIGN..SLAVON
A674..A67D  ; PVALID      # COMB CYR KAVYKA..COMB CYR PAYEROK
A67E        ; FREE_PVAL   # CYR KAVYKA
A67F..A697  ; PVALID      # CYR PAYEROK..CYR SM LET SHWE
A698..A69E  ; UNASSIGNED  # <reserved>..<reserved>
A67F        ; FREE_PVAL   # COMB CYR LET IOTIFIED E
A6A0..A6E5  ; PVALID      # BAMUM LET A..BAMUM LET KI
A6E6..A6EF  ; FREE_PVAL   # BAMUM LET MO..BAMUM LET KOGHOM
A6F0..A6F1  ; PVALID      # BAMUM COMB MARK KOQNDON..BAMUM COMB
A6F2..A6F7  ; FREE_PVAL   # BAMUM NJAEMLI..BAMUM QUEST MARK
A6F8..A6FF  ; UNASSIGNED  # <reserved>..<reserved>
A700..A716  ; FREE_PVAL   # MOD LET CHIN TONE YIN PING..MOD
A717..A71F  ; PVALID      # MOD LET DOT VERT BAR..MOD L
A720..A721  ; FREE_PVAL   # MOD LET STRESS AND HIGH TONE..MOD
A722..A788  ; PVALID      # LAT CAP LET EGYPT ALEF..MOD LET LOW 
A789..A789  ; FREE_PVAL   # MOD LET COLON..MOD LET SH EQUALS SI
A78B..A78E  ; PVALID      # LAT SM LET SALTILLO..LAT SM LET L W
A78F..A7FA  ; UNASSIGNED  # <reserved>..<reserved>
A7FB..A827  ; PVALID      # LAT EPIGRAPHIC LET REV F..SYLOTI NA
A828..A82B  ; FREE_PVAL   # SYLOTI NAGRI POET MARK-1..SYLOTI NA
A82C..A82F  ; UNASSIGNED  # <reserved>..<reserved>
A830..A839  ; FREE_PVAL   # N INDIC FRACT ONE QUART..N INDIC QU
A83A..A83F  ; UNASSIGNED  # <reserved>..<reserved>
A840..A873  ; PVALID      # PHAGS-PA LET KA..PHAGS-PA LET CANDR
A874..A877  ; FREE_PVAL   # PHAGS-PA SINGLE HEAD MARK..PHAGS-PA 
A878..A87F  ; UNASSIGNED  # <reserved>..<reserved>
A880..A8C4  ; PVALID      # SAUR SIGN ANUSVARA..SAUR SIGN VIRAM
A8C5..A8CD  ; UNASSIGNED  # <reserved>..<reserved>
A8CE..A8CF  ; FREE_PVAL   # SAUR DANDA..SAUR DOUBLE DANDA
A8D0..A8D9  ; PVALID      # SAUR DIG ZERO..SAUR DIG NINE
A8DA..A8DF  ; UNASSIGNED  # <reserved>..<reserved>
A8E0..A8F7  ; PVALID      # COMB DEVAN DIG ZERO..DEVAN SIGN CAN
A8F8..A8FA  ; FREE_PVAL   # DEVAN SIGN PUSHPIKA..DEVAN CARET
A8FB        ; PVALID      # DEVAN HEADSTROKE
A8FC..A8FF  ; UNASSIGNED  # <reserved>..<reserved>
A900..A92D  ; PVALID      # KAYAH LI DIG ZERO..KAYAH LI TONE CA
A92E..A92F  ; FREE_PVAL   # KAYAH LI SIGN CWI..KAYAH LI SIGN SH
A930..A953  ; PVALID      # REJANG LET KA..REJANG VIRAMA
A954..A95E  ; UNASSIGNED  # <reserved>..<reserved>
A95F        ; FREE_PVAL   # REJANG SECTION MARK
A960..A97C  ; DISALLOWED  # HANGUL CHO TIKEUT-MIUEM..HANGUL CHO
A97D..A97F  ; UNASSIGNED  # <reserved>..<reserved>
A980..A9C0  ; PVALID      # JAV SIGN PANYANGGA..JAV PANGKON
A9C1..A9CD  ; FREE_PVAL   # JAV LEFT RERENGGAN..JAV TURNED PADA
A9CE        ; UNASSIGNED  # <reserved>
A9CF..A9D9  ; PVALID      # JAV PANGRANGKEP..JAV DIG NINE
A9DA..A9DD  ; UNASSIGNED  # <reserved>..<reserved>
A9DE..A9DF  ; FREE_PVAL   # JAV PADA TIRTA TUMETES..JAV PADA I
A9E0..A9FF  ; UNASSIGNED  # <reserved>..<reserved>
AA00..AA36  ; PVALID      # CHAM LET A..CHAM CONS SIGN WA
AA37..AA3F  ; UNASSIGNED  # <reserved>..<reserved>
AA40..AA4D  ; PVALID      # CHAM LET FIN K..CHAM CONS SIGN FIN
AA4E..AA4F  ; UNASSIGNED  # <reserved>..<reserved>
AA50..AA59  ; PVALID      # CHAM DIG ZERO..CHAM DIG NINE
AA5A..AA5B  ; UNASSIGNED  # <reserved>..<reserved>
AA5C..AA5F  ; FREE_PVAL   # CHAM PUNCT SPIRAL..CHAM PUNCT TR
AA60..AA76  ; PVALID      # MYAN LET KHAMTI GA..MYAN LOGOGRAM K
AA77..AA79  ; FREE_PVAL   # MYAN SYM AITON EXCLAM..MYAN SYM AIT
AA7A..AA7B  ; PVALID      # MYAN LET AITON RA..MYAN SIGN PAO KA
AA7C..AA7F  ; UNASSIGNED  # <reserved>..<reserved>
AA80..AAC2  ; PVALID      # TAI VIET LET LOW KO..TAI VIET TONE
AAC3..AADA  ; UNASSIGNED  # <reserved>..<reserved>
AADB..AADD  ; PVALID      # TAI VIET SYM KON..TAI VIET SYM SAM
AADE..AADF  ; FREE_PVAL   # TAI VIET SYM HO HOI..TAI VIET SYM K
AAE0..AAEF  ; PVALID      # MEETEI MAYEK LET E..MEETEI MAYEK VO
AAF0..AAF1  ; FREE_PVAL   # MEETEI MAYEK CHEIKHAN..MEETEI MAYEK
AAF2..AAF6  ; PVALID      # MEETEI MAYEK ANJI..MEETEI MAYEK VIR
AAF7..AAFF  ; UNASSIGNED  # <reserved>..<reserved>
AB01..AB2E  ; PVALID      # ETHI SYL TTHU..ETHI SYL BBO
AB2F..ABBF  ; UNASSIGNED  # <reserved>..<reserved>
ABC0..ABEA  ; PVALID      # MEETEI MAYEK LET KOK..MEETEI MAYEK
ABEB        ; FREE_PVAL   # MEETEI MAYEK CHEIKHEI
ABEC..ABED  ; PVALID      # MEETEI MAYEK LUM IYEK..MEETEI MAYEK
ABEE..ABEF  ; UNASSIGNED  # <reserved>..<reserved>
ABF0..ABF9  ; PVALID      # MEETEI MAYEK DIG ZERO..MEETEI MAYEK
ABFA..ABFF  ; UNASSIGNED  # <reserved>..<reserved>
AC00..D7A3  ; PVALID      # <Hangul Syllable>..<Hangul Syllable
D7A4..D7AF  ; UNASSIGNED  # <reserved>..<reserved>
D7B0..D7C6  ; DISALLOWED  # HANGUL JUNG O-YEO..HANGUL JUNG ARAE
D7C7..D7CA  ; UNASSIGNED  # <reserved>..<reserved>
D7CB..D7FB  ; DISALLOWED  # HANGUL JONG NIEUN-RIEUL..HANGUL JON
D7FC..D7FF  ; UNASSIGNED  # <reserved>..<reserved>
D800..F8FF  ; DISALLOWED  # <Non Private Use High Surrogate>..<
F900..FA0D  ; FREE_PVAL   # CJK COMP IDEO-F900..CJK COMP IDEO-F
FA0E..FA0F  ; PVALID      # CJK COMP IDEO-FA0E..CJK COMP IDEO
FA10        ; FREE_PVAL   # CJK COMP IDEO-FA10
FA11        ; PVALID      # CJK COMP IDEO-FA11
FA12        ; FREE_PVAL   # CJK COMP IDEO-FA12
FA13..FA14  ; PVALID      # CJK COMP IDEO-FA13..CJK COMP IDEO
FA15..FA1E  ; FREE_PVAL   # CJK COMP IDEO-FA15..CJK COMP IDEO
FA1F        ; PVALID      # CJK COMP IDEO-FA1F
FA20        ; FREE_PVAL   # CJK COMP IDEO-FA20
FA21        ; PVALID      # CJK COMP IDEO-FA21
FA22        ; FREE_PVAL   # CJK COMP IDEO-FA22
FA23..FA24  ; PVALID      # CJK COMP IDEO-FA23..CJK COMP IDEO
FA25..FA26  ; FREE_PVAL   # CJK COMP IDEO-FA25..CJK COMP IDEO
FA27..FA29  ; PVALID      # CJK COMP IDEO-FA27..CJK COMP IDEO
FA2A..FA6D  ; FREE_PVAL   # CJK COMP IDEO-FA2A..CJK COMP IDEO
FA6E..FA6F  ; UNASSIGNED  # <reserved>..<reserved>
FA70..FAD9  ; FREE_PVAL   # CJK COMP IDEO-FA70..CJK COMP IDEO
FADA..FAFF  ; UNASSIGNED  # <reserved>..<reserved>
FB00..FB06  ; FREE_PVAL   # LAT SM LIG FF..LAT SM LIG ST
FB07..FB12  ; UNASSIGNED  # <reserved>..<reserved>
FB13..FB17  ; FREE_PVAL   # ARMENIAN SM LIG MEN NOW..ARMENIAN SM
FB18..FB1C  ; UNASSIGNED  # <reserved>..<reserved>
FB1D        ; FREE_PVAL   # HEBR LET YOD W HIRIQ
FB1E        ; PVALID      # HEBR PNT JUDEO-SPANISH VARIKA
FB1F..FB36  ; FREE_PVAL   # HEBR LIG YIDDISH YOD YOD PATAH..HEBRE
FB37        ; UNASSIGNED  # <reserved>
FB38..FB3C  ; FREE_PVAL   # HEBR LET TET W DAGESH..HEBR LET
FB3D        ; UNASSIGNED  # <reserved>
FB3E        ; FREE_PVAL   # HEBR LET MEM W DAGESH
FB3F        ; UNASSIGNED  # <reserved>
FB40..FB41  ; FREE_PVAL   # HEBR LET NUN W DAGESH..HEBR LET
FB42        ; UNASSIGNED  # <reserved>
FB43..FB44  ; FREE_PVAL   # HEBR LET FIN PE W DAGESH..HEBR L
FB45        ; UNASSIGNED  # <reserved>
FB46..FBC1  ; FREE_PVAL   # HEBR LET TSADI W DAGESH..ARAB SYM S
FBC2..FBD2  ; UNASSIGNED  # <reserved>..<reserved>
FBD3..FD3F  ; FREE_PVAL   # ARAB LET NG ISO FORM..ORNATE RIGHT
FD40..FD4F  ; UNASSIGNED  # <reserved>..<reserved>
FD50..FD8F  ; FREE_PVAL   # ARAB LIG TEH W JEEM W MEEM INIT
FD90..FD91  ; UNASSIGNED  # <reserved>..<reserved>
FD92..FDC7  ; FREE_PVAL   # ARAB LIG MEEM W JEEM W KHAH INI
FDC8..FDEF  ; UNASSIGNED  # <reserved>..<reserved>
FDF0..FDFD  ; FREE_PVAL   # ARAB LIG SALLA USED..ARAB LIG BISMI
FDFE..FDFF  ; UNASSIGNED  # <reserved>..<reserved>
FE00..FE19  ; FREE_PVAL   # VAR SEL-1..PRESENTATION FORM FOR VE
FE1A..FE1F  ; UNASSIGNED  # <reserved>..<reserved>
FE20..FE26  ; PVALID      # COMB LIG LEFT HALF..COMB CONJ MACRO
FE27..FE2F  ; UNASSIGNED  # <reserved>..<reserved>
FE30..FE52  ; FREE_PVAL   # PRES FORM FOR VERT TWO DOT LEAD..SM
FE53        ; UNASSIGNED  # <reserved>
FE54..FE66  ; FREE_PVAL   # SM SEMICOLON..SM EQUALS SIGN
FE67        ; UNASSIGNED  # <reserved>
FE68..FE6B  ; FREE_PVAL   # SM REV SOLIDUS..SM COMM AT
FE6C..FE6F  ; UNASSIGNED  # <reserved>..<reserved>
FE70..FE72  ; FREE_PVAL   # ARAB FATHATAN ISO FORM..ARAB DAMMAT
FE73        ; PVALID      # ARAB TAIL FRAGMENT
FE74        ; FREE_PVAL   # ARAB KASRATAN ISO FORM
FE75        ; UNASSIGNED  # <reserved>
FE76..FEFC  ; FREE_PVAL   # ARAB FATHA ISO FORM..ARAB LIG LAM W
FEFD..FEFE  ; UNASSIGNED  # <reserved>..<reserved>
FEFF        ; DISALLOWED  # ZERO WIDTH NO-BREAK SPACE
FF00        ; UNASSIGNED  # <reserved>
FF01..FFBE  ; FREE_PVAL   # FULLW EXCLAM MARK..HALFW HANGUL
FFBF..FFC1  ; UNASSIGNED  # <reserved>..<reserved>
FFC2..FFC7  ; FREE_PVAL   # HALFW HANGUL LET A..HALFW HANGUL
FFC8..FFC9  ; UNASSIGNED  # <reserved>..<reserved>
FFCA..FFCF  ; FREE_PVAL   # HALFW HANGUL LET YEO..HALFW HANGU
FFD0..FFD1  ; UNASSIGNED  # <reserved>..<reserved>
FFD2..FFD7  ; FREE_PVAL   # HALFW HANGUL LET YO..HALFW HANGUL
FFD8..FFD9  ; UNASSIGNED  # <reserved>..<reserved>
FFDA..FFDC  ; FREE_PVAL   # HALFW HANGUL LET EU..HALFW HANGUL
FFDD..FFDF  ; UNASSIGNED  # <reserved>..<reserved>
FFE0..FFE6  ; FREE_PVAL   # FULLW CENT SIGN..FULLW WON SIGN
FFE7        ; UNASSIGNED  # <reserved>
FFE8..FFEE  ; FREE_PVAL   # HALFW FORMS LIGHT VERT..HALFW WH
FFEF..FFF8  ; UNASSIGNED  # <reserved>..<reserved>
FFF9..FFFB  ; DISALLOWED  # INTERL ANNO ANCHOR..INTERL ANNO TER
FFFC..FFFD  ; FREE_PVAL   # OBJECT REPL CHAR..REPL CHAR
10000..1000B; PVALID      # LIN B SYL B008 A..LIN B SYL
1000C       ; UNASSIGNED  # <reserved>
1000D..10026; PVALID      # LIN B SYL B036 JO..LIN B SYL
10027       ; UNASSIGNED  # <reserved>
10028..1003A; PVALID      # LIN B SYL B060 RA..LIN B SYL
1003B       ; UNASSIGNED  # <reserved>
1003C..1003D; PVALID      # LIN B SYL B017 ZA..LIN B SYL
1003E       ; UNASSIGNED  # <reserved>
1003F..1004D; PVALID      # LIN B SYL B020 ZO..LIN B SYL
1004E..1004F; UNASSIGNED  # <reserved>..<reserved>
10050..1005D; PVALID      # LIN B SYM B018..LIN B SYM B089
1005E..1007F; UNASSIGNED  # <reserved>..<reserved>
10080..100FA; PVALID      # LIN B IDEO B100 MAN..LIN B IDEO
100FB..100FF; UNASSIGNED  # <reserved>..<reserved>
10100..10102; FREE_PVAL   # AEG WORD SEP LINE..AEG CHECK MAR
10103..10106; UNASSIGNED  # <reserved>..<reserved>
10107..10133; FREE_PVAL   # AEG NUM ONE..AEG NUM NINETY THOU
10134..10136; UNASSIGNED  # <reserved>..<reserved>
10137..1018A; FREE_PVAL   # AEG WEIGHT BASE UNIT..GREEK ZERO SI
1018B..1018F; UNASSIGNED  # <reserved>..<reserved>
10190..1019B; FREE_PVAL   # ROM SEXTANS SIGN..ROM CENTURIAL SIG
1019C..101CF; UNASSIGNED  # <reserved>..<reserved>
101D0..101FC; FREE_PVAL   # PHAISTOS DISC SIGN PED..PHAISTOS DI
101FD       ; PVALID      # PHAISTOS DISC SIGN COMB OBLIQUE STR
101FE..1027F; UNASSIGNED  # <reserved>..<reserved>
10280..1029C; PVALID      # LYCIAN LET A..LYCIAN LET X
1029D..1029F; UNASSIGNED  # <reserved>..<reserved>
102A0..102D0; PVALID      # CARIAN LET A..CARIAN LET UUU3
102D1..102FF; UNASSIGNED  # <reserved>..<reserved>
10300..1031E; PVALID      # OLD ITAL LET A..OLD ITAL LET UU
1031F       ; UNASSIGNED  # <reserved>
10320..10323; FREE_PVAL   # OLD ITAL NUM ONE..OLD ITAL NUM F
10324..1032F; UNASSIGNED  # <reserved>..<reserved>
10330..10340; PVALID      # GOTH LET AHSA..GOTH LET PAIRTHRA
10341       ; FREE_PVAL   # GOTH LET NINETY
10342..10349; PVALID      # GOTH LET RAIDA..GOTH LET OTHAL
1034A       ; FREE_PVAL   # GOTH LET NINE HUNDRED
1034B..1037F; UNASSIGNED  # <reserved>..<reserved>
10380..1039D; PVALID      # UGAR LET ALPA..UGAR LET SSU
1039E       ; UNASSIGNED  # <reserved>
1039F       ; FREE_PVAL   # UGAR WORD DIVIDER
103A0..103C3; PVALID      # OLD PERS SIGN A..OLD PERS SIGN HA
103C4..103C7; UNASSIGNED  # <reserved>..<reserved>
103C8..103CF; PVALID      # OLD PERS SIGN AURAMAZDAA..OLD PERS
103D0..103D5; FREE_PVAL   # OLD PERS WORD DIVIDER..OLD PERS NUM
103D6..103FF; UNASSIGNED  # <reserved>..<reserved>
10400..1049D; PVALID      # DESERET CAP LET LONG I..OSMANYA LET
1049E..1049F; UNASSIGNED  # <reserved>..<reserved>
104A0..104A9; PVALID      # OSMANYA DIG ZERO..OSMANYA DIG NINE
104AA..107FF; UNASSIGNED  # <reserved>..<reserved>
10800..10805; PVALID      # CYPRIOT SYL A..CYPRIOT SYL JA
10806..10807; UNASSIGNED  # <reserved>..<reserved>
10808       ; PVALID      # CYPRIOT SYL JO
10809       ; UNASSIGNED  # <reserved>
1080A..10835; PVALID      # CYPRIOT SYL KA..CYPRIOT SYL WO
10836       ; UNASSIGNED  # <reserved>
10837..10838; PVALID      # CYPRIOT SYL XA..CYPRIOT SYL XE
10839..1083B; UNASSIGNED  # <reserved>..<reserved>
1083C       ; PVALID      # CYPRIOT SYL ZA
1083D..1083E; UNASSIGNED  # <reserved>..<reserved>
1083F..10855; PVALID      # CYPRIOT SYL ZO..IMP ARAM LET TAW
10856       ; UNASSIGNED  # <reserved>
10857..1085F; FREE_PVAL   # IMP ARAM SECT SIGN..IMP ARAM
10860..108FF; UNASSIGNED  # <reserved>..<reserved>
10900..10915; PVALID      # PHOEN LET ALF..PHOEN LET TAU
10916..1091B; FREE_PVAL   # PHOEN NUM ONE..PHOEN NUM THR
1091C..1091E; UNASSIGNED  # <reserved>..<reserved>
1091F       ; FREE_PVAL   # PHOEN WORD SEP
10920..10939; PVALID      # LYDIAN LET A..LYDIAN LET C
1093A..1093E; UNASSIGNED  # <reserved>..<reserved>
1093F       ; FREE_PVAL   # LYDIAN TRIANGULAR MARK
10940..109FF; UNASSIGNED  # <reserved>..<reserved>
10A00..10A03; PVALID      # KHARO LET A..KHARO VOW SIGN V
10A04       ; UNASSIGNED  # <reserved>
10A05..10A06; PVALID      # KHARO VOW SIGN E..KHARO VOW SI
10A07..10A0B; UNASSIGNED  # <reserved>..<reserved>
10A0C..10A13; PVALID      # KHARO VOW LEN MARK..KHARO LET
10A14       ; UNASSIGNED  # <reserved>
10A15..10A17; PVALID      # KHARO LET CA..KHARO LET JA
10A18       ; UNASSIGNED  # <reserved>
10A19..10A33; PVALID      # KHARO LET NYA..KHARO LET TTT
10A34..10A37; UNASSIGNED  # <reserved>..<reserved>
10A38..10A3A; PVALID      # KHARO SIGN BAR ABOVE..KHARO SIGN D
10A3B..10A3E; UNASSIGNED  # <reserved>..<reserved>
10A3F       ; PVALID      # KHARO VIRAMA
10A40..10A47; FREE_PVAL   # KHARO DIG ONE..KHARO NUM ONE
10A48..10A4F; UNASSIGNED  # <reserved>..<reserved>
10A50..10A58; FREE_PVAL   # KHARO PUNCT DOT..KHARO PUNCT
10A59..10A5F; UNASSIGNED  # <reserved>..<reserved>
10A60..10A7C; PVALID      # OLD S ARAB LET HE..OLD SOUTH ARAB
10A7D..10A7F; FREE_PVAL   # OLD S ARAB NUM ONE..OLD SOUTH ARAB
10A80..10AFF; UNASSIGNED  # <reserved>..<reserved>
10B00..10B35; PVALID      # AVESTAN LET A..AVESTAN LET HE
10B36..10B38; UNASSIGNED  # <reserved>..<reserved>
10B39..10B3F; FREE_PVAL   # AVESTAN ABBR MARK..LARGE ONE RING O
10B40..10B55; PVALID      # INSCRIPT PARTHIAN LET ALEPH..INSCRI
10B56..10B57; UNASSIGNED  # <reserved>..<reserved>
10B58..10B5F; FREE_PVAL   # INSCRIPT PARTHIAN NUM ONE..INSCRIPT
10B60..10B72; PVALID      # INSCRIPT PAHLAVI LET ALEPH..INSCRIP
10B73..10B77; UNASSIGNED  # <reserved>..<reserved>
10B78..10B7F; FREE_PVAL   # INSCRIPT PAHLAVI NUM ONE..INSCRIPT
10B80..10BFF; UNASSIGNED  # <reserved>..<reserved>
10C00..10C48; PVALID      # OLD TURK LET ORKHON A..OLD TURK LET
10C49..10E5F; UNASSIGNED  # <reserved>..<reserved>
10E60..10E7E; FREE_PVAL   # RUMI DIG ONE..RUMI FRACTION TWO THI
10E7F..10FFF; UNASSIGNED  # <reserved>..<reserved>
11000..11046; PVALID      # BRAHMI SIGN CANDRABINDU..BRAHMI VIR
11047..1104D; FREE_PVAL   # BRAHMI DANDA..BRAHMI PUNCT LOTUS
1104E..11051; UNASSIGNED  # <reserved>..<reserved>
11052..1106F; FREE_PVAL   # BRAHMI NUM ONE..BRAHMI DIG NINE
11070..1107F; UNASSIGNED  # <reserved>..<reserved>
11080..110BA; PVALID      # KAITHI SIGN CANDRABINDU..KAITHI SIG
110BB..110C1; FREE_PVAL   # KAITHI ABBR SIGN..KAITHI DOUBLE DAN
110C2..110CF; UNASSIGNED  # <reserved>..<reserved>
110D0..110F9; PVALID      # SORA SOMPENG LETTER SAH..SORA SOMPE
11100..1113F; PVALID      # CHAKMA SIGN CANDRABINDU..CHAKMA DIG NI
11140..11143; FREE_PVAL   # CHAKMA SECT MARK..CHAKMA QUEST MARK
11144..1117F; UNASSIGNED  # <reserved>..<reserved>
11180..111C4; PVALID      # SHARADA SIGN CANDRABINDU..SHARADA OM
111C5..111C8; FREE_PVAL   # SHARADA DANDA..SHARADA SEPARATOR
111C9..111CF; UNASSIGNED  # <reserved>..<reserved>
111D0..111D9; PVALID      # SHARADA DIG ZERO..SHARADA DIG NINE
111DA..1167F; UNASSIGNED  # <reserved>..<reserved>
11680..116C9; PVALID      # TAKRI LET A..TAKRI DIG NINE
116CF..1FFFF; UNASSIGNED  # <reserved>..<reserved>
12000..1236E; PVALID      # CUNEI SIGN A..CUNEI SIGN ZUM
1236F..123FF; UNASSIGNED  # <reserved>..<reserved>
12400..12462; FREE_PVAL   # CUNEI NUM SIGN TWO ASH..CUNEI NUM
12463..1246F; UNASSIGNED  # <reserved>..<reserved>
12470..12473; FREE_PVAL   # CUNEI PUNCT SIGN OLD ASSYRIAN WORD
12474..12FFF; UNASSIGNED  # <reserved>..<reserved>
13000..1342E; PVALID      # EGYPT HIERO A001..EGYPT HIERO AA032
1342F..167FF; UNASSIGNED  # <reserved>..<reserved>
16800..16A38; PVALID      # BAMUM LET PHASE-A NGKUE MFON..BAMUN LE
16A39..16EFF; UNASSIGNED  # <reserved>..<reserved>
16F00..16F44; PVALID      # MIAO LET PA..MIAO LET HHA
16F45..16F4F; UNASSIGNED  # <reserved>..<reserved>
16F50..16F9F; PVALID      # MIAO LET NAS..MIAO LET REF TONE-8
16FA0..1AFFF; UNASSIGNED  # <reserved>..<reserved>
1B000..1B001; PVALID      # KATA LET ARCH E..KATA LET ARCH YE
1B002..1CFFF; UNASSIGNED  # <reserved>..<reserved>
1D000..1D0F5; FREE_PVAL   # BYZ MUS SYM PSILI..BYZ MUS
1D0F6..1D0FF; UNASSIGNED  # <reserved>..<reserved>
1D100..1D126; FREE_PVAL   # MUS SYM SINGLE BARLINE..MUS SYMBOL
1D127..1D128; UNASSIGNED  # <reserved>..<reserved>
1D129..1D1DD; FREE_PVAL   # MUS SYM MULT MEASURE REST..MUS PES SUB
1D1DE..1D1FF; UNASSIGNED  # <reserved>..<reserved>
1D200..1D245; FREE_PVAL   # GREEK VOCAL NOTATION SYM-1..GREEK MUS
1D246..1D2FF; UNASSIGNED  # <reserved>..<reserved>
1D300..1D356; DISALLOWED  # MONOG FOR EARTH..TETRAG FOR FOSTERING
1D357..1D35F; UNASSIGNED  # <reserved>..<reserved>
1D360..1D371; DISALLOWED  # COUNT ROD UNIT DIG ONE..COUNT ROD TE
1D372..1D3FF; UNASSIGNED  # <reserved>..<reserved>
1D400..1D454; FREE_PVAL   # MATH BOLD CAP A..MATH IT
1D455       ; UNASSIGNED  # <reserved>
1D456..1D49C; FREE_PVAL   # MATH ITAL SM I..MATH SC
1D49D       ; UNASSIGNED  # <reserved>
1D49E..1D49F; FREE_PVAL   # MATH SCRIPT CAP C..MATH
1D4A0..1D4A1; UNASSIGNED  # <reserved>..<reserved>
1D4A2       ; FREE_PVAL   # MATH SCRIPT CAP G
1D4A3..1D4A4; UNASSIGNED  # <reserved>..<reserved>
1D4A5..1D4A6; FREE_PVAL   # MATH SCRIPT CAP J..MATH
1D4A7..1D4A8; UNASSIGNED  # <reserved>..<reserved>
1D4A9..1D4AC; FREE_PVAL   # MATH SCRIPT CAP N..MATH
1D4AD       ; UNASSIGNED  # <reserved>
1D4AE..1D4B9; FREE_PVAL   # MATH SCRIPT CAP S..MATH
1D4BA       ; UNASSIGNED  # <reserved>
1D4BB       ; FREE_PVAL   # MATH SCRIPT SM F
1D4BC       ; UNASSIGNED  # <reserved>
1D4BD..1D4C3; FREE_PVAL   # MATH SCRIPT SM H..MATH SC
1D4C4       ; UNASSIGNED  # <reserved>
1D4C5..1D505; FREE_PVAL   # MATH SCRIPT SM P..MATH FR
1D506       ; UNASSIGNED  # <reserved>
1D507..1D50A; FREE_PVAL   # MATH FRAKTUR CAP D..MATH
1D50B..1D50C; UNASSIGNED  # <reserved>..<reserved>
1D50D..1D514; FREE_PVAL   # MATH FRAKTUR CAP J..MATH
1D515       ; UNASSIGNED  # <reserved>
1D516..1D51C; FREE_PVAL   # MATH FRAKTUR CAP S..MATH
1D51D       ; UNASSIGNED  # <reserved>
1D51E..1D539; FREE_PVAL   # MATH FRAKTUR SM A..MATH D
1D53A       ; UNASSIGNED  # <reserved>
1D53B..1D53E; FREE_PVAL   # MATH DOUBLE-STRUCK CAP D..MATHEM
1D53F       ; UNASSIGNED  # <reserved>
1D540..1D544; FREE_PVAL   # MATH DOUBLE-STRUCK CAP I..MATHEM
1D545       ; UNASSIGNED  # <reserved>
1D546       ; FREE_PVAL   # MATH DOUBLE-STRUCK CAP O
1D547..1D549; UNASSIGNED  # <reserved>..<reserved>
1D54A..1D550; FREE_PVAL   # MATH DOUBLE-STRUCK CAP S..MATHEM
1D551       ; UNASSIGNED  # <reserved>
1D552..1D6A5; FREE_PVAL   # MATH DOUBLE-STRUCK SM A..MATHEMAT
1D6A6..1D6A7; UNASSIGNED  # <reserved>..<reserved>
1D6A8..1D7CB; FREE_PVAL   # MATH BOLD CAP ALPHA..MATHEMATICA
1D7CC..1D7CD; UNASSIGNED  # <reserved>..<reserved>
1D7CE..1D7FF; FREE_PVAL   # MATH BOLD DIG ZERO..MATH M
1D800..1EDFF; UNASSIGNED  # <reserved>..<reserved>
1EE00..1EE03; FREE_PVAL   # ARAB MATH ALEF..ARAB MATH DAL
1EE04       ; UNASSIGNED  # <reserved>
1EE05..1EE1F; FREE_PVAL   # ARAB MATH WAW..ARAB MATH DOTLESS QAF
1EE20       ; UNASSIGNED  # <reserved>
1EE21..1EE22; FREE_PVAL   # ARAB MATH INIT BEH..ARAB MATH INIT JEE
1EE23       ; UNASSIGNED  # <reserved>
1EE24       ; FREE_PVAL   # ARAB MATH INIT HEH
1EE25..1EE26; UNASSIGNED  # <reserved>..<reserved>
1EE27       ; FREE_PVAL   # ARAB MATH INIT HAH
1EE28       ; UNASSIGNED  # <reserved>
1EE29..1EE32; FREE_PVAL   # ARAB MATH INIT YEH..ARAB MATH INIT QAF
1EE33       ; UNASSIGNED  # <reserved>
1EE34..1EE39; FREE_PVAL   # ARAB MATH INIT SHEEN..ARAB MATH INIT
1EE3A       ; UNASSIGNED  # <reserved>
1EE3B       ; FREE_PVAL   # ARAB MATH INIT GHAIN
1EE3C..1EE41; UNASSIGNED  # <reserved>..<reserved>
1EE42       ; FREE_PVAL   # ARAB MATH TAILED JEEM
1EE43..1EE46; UNASSIGNED  # <reserved>..<reserved>
1EE47       ; FREE_PVAL   # ARAB MATH TAILED HAH
1EE48       ; UNASSIGNED  # <reserved>
1EE49       ; FREE_PVAL   # ARAB MATH TAILED YEH
1EE4A       ; UNASSIGNED  # <reserved>
1EE4B       ; FREE_PVAL   # ARAB MATH TAILED LAM
1EE4C       ; UNASSIGNED  # <reserved>
1EE4D..1EE4F; FREE_PVAL   # ARAB MATH TAILED NOON..ARAB MATH TAILE
1EE50       ; UNASSIGNED  # <reserved>
1EE51..1EE52; FREE_PVAL   # ARAB MATH TAILED QAF..ARAB MATH TAILED
1EE53       ; UNASSIGNED  # <reserved>
1EE54       ; FREE_PVAL   # ARAB MATH TAILED SHEEN
1EE55..1EE56; UNASSIGNED  # <reserved>..<reserved>
1EE57       ; FREE_PVAL   # ARAB MATH TAILED KHAH
1EE58       ; UNASSIGNED  # <reserved>
1EE59       ; FREE_PVAL   # ARAB MATH TAILED DAD
1EE5A       ; UNASSIGNED  # <reserved>
1EE5B       ; FREE_PVAL   # ARAB MATH TAILED GHAIN
1EE5C       ; UNASSIGNED  # <reserved>
1EE5D       ; FREE_PVAL   # ARAB MATH TAILED DOTLESS NOON
1EE5E       ; UNASSIGNED  # <reserved>
1EE5F       ; FREE_PVAL   # ARAB MATH TAILED DOTLESS GHAIN
1EE60       ; UNASSIGNED  # <reserved>
1EE61..1EE62; FREE_PVAL   # ARAB MATH STRETCHED BEH..ARAB MATH STR
1EE63       ; UNASSIGNED  # <reserved>
1EE64       ; FREE_PVAL   # ARAB MATH STRETCHED HEH
1EE65..1EE66; UNASSIGNED  # <reserved>..<reserved>
1EE67..1EE6A; FREE_PVAL   # ARAB MATH STRETCHED HAH..ARAB MATH STR
1EE6B       ; UNASSIGNED  # <reserved>
1EE6C..1EE72; FREE_PVAL   # ARAB MATH STRETCHED MEEM..ARAB MATH ST
1EE73       ; UNASSIGNED  # <reserved>
1EE74..1EE77; FREE_PVAL   # ARAB MATH STRETCHED SHEEN..ARAB MATH S
1EE78       ; UNASSIGNED  # <reserved>
1EE79..1EE7C; FREE_PVAL   # ARAB MATH STRETCHED DAD..ARAB MATH STR
1EE7D       ; UNASSIGNED  # <reserved>
1EE7E       ; FREE_PVAL   # ARAB MATH STRETCHED DOTLESS FEH
1EE7F       ; UNASSIGNED  # <reserved>
1EE80..1EE89; FREE_PVAL   # ARAB MATH LOOPED ALEF..ARAB MATH LOOPE
1EE8A       ; UNASSIGNED  # <reserved>
1EE8B..1EE9B; FREE_PVAL   # ARAB MATH LOOPED LAM..ARAB MATH LOOPED
1EE9C..1EEA0; UNASSIGNED  # <reserved>..<reserved>
1EEA1..1EEA3; FREE_PVAL   # ARAB MATH DOUBLE-STRUCK BEH..ARAB MATH
1EEA4       ; UNASSIGNED  # <reserved>
1EEA5..1EEA9; FREE_PVAL   # ARAB MATH DOUBLE-STRUCK WAW..ARAB MATH
1EEAA       ; UNASSIGNED  # <reserved>
1EEAB..1EEBB; FREE_PVAL   # ARAB MATH DOUBLE-STRUCK LAM..ARAB MATH
1EEBC..1EEEF; UNASSIGNED  # <reserved>..<reserved>
1EEF0..1EEF1; FREE_PVAL   # ARAB MATH OP MEEM W HAH W TATWHEEL..AR
1EEF2..1EFFF; UNASSIGNED  # <reserved>..<reserved>
1F000..1F02B; FREE_PVAL   # MAHJONG TILE EAST WIND..MAHJONG TILE B
1F02C..1F02F; UNASSIGNED  # <reserved>..<reserved>
1F030..1F093; DISALLOWED  # DOMINO TILE HORIZ BACK..DOMINO TILE VE
1F094..1F09F; UNASSIGNED  # <reserved>..<reserved>
1F0A0..1F0AE; FREE_PVAL   # PLAY CARD BACK..PLAY CARD KING OF SPAD
1F0AF..1F0B0; UNASSIGNED  # <reserved>..<reserved>
1F0B1..1F0BE; FREE_PVAL   # PLAY CARD ACE OF HEARTS..PLAY CARD KIN
1F0BF..1F0C0; UNASSIGNED  # <reserved>..<reserved>
1F0C1..1F0CF; FREE_PVAL   # PLAY CARD ACE OF DIAMONDS..PLAY CARD B
1F0D0       ; UNASSIGNED  # <reserved>
1F0D1..1F0DF; FREE_PVAL   # PLAY CARD ACE OF CLUBS..PLAY CARD WHIT
1F0E0..1F0FF; UNASSIGNED  # <reserved>..<reserved>
1F100..1F10A; FREE_PVAL   # DIG ZERO FULL STOP..DIG NINE COMMA
1F10B..1F10F; UNASSIGNED  # <reserved>..<reserved>
1F110..1F12E; DISALLOWED  # PARENTHESIZED LAT CAP LET A..CIRCLE
1F12F       ; UNASSIGNED  # <reserved>
1F130..1F16B; FREE_PVAL   # SQUARED LAT CAP LET A..RAISED MD SIGN
1F16C..1F16F; UNASSIGNED  # <reserved>..<reserved>
1F170..1F19A; FREE_PVAL   # NEG SQ LAT CAP LET A..SQUARED VS
1F19B..1F1E5; UNASSIGNED  # <reserved>..<reserved>
1F1E6..1F202; FREE_PVAL   # REG IND SYMB LET A..SQ KATAKANA SA
1F203..1F20F; UNASSIGNED  # <reserved>..<reserved>
1F210..1F23A; FREE_PVAL   # SQ CJK UNIF IDEO-624B..SQ CJK UNIF IDE
1F23B..1F23F; UNASSIGNED  # <reserved>..<reserved>
1F240..1F248; FREE_PVAL   # TORT SH BRACK CJK UNIF IDEO-672C..TORT
1F249..1F24F; UNASSIGNED  # <reserved>..<reserved>
1F250..1F251; FREE_PVAL   # CIRC IDEO ADVANTAGE..CIRC IDEO ACCEPT
1F252..1F2FF; UNASSIGNED  # <reserved>..<reserved>
1F300..1F320; FREE_PVAL   # CYCLONE..SHOOTING STAR
1F321..1F32F; UNASSIGNED  # <reserved>..<reserved>
1F330..1F325; FREE_PVAL   # CHESTNUT..CACTUS
1F326       ; UNASSIGNED  # <reserved>
1F337..1F37C; FREE_PVAL   # TULIP..BABY BOTTLE
1F37D..1F37F; UNASSIGNED  # <reserved>..<reserved>
1F380..1F393; FREE_PVAL   # RIBBON..GRADUATION CAP
1F394..1F39F; UNASSIGNED  # <reserved>..<reserved>
1F3A0..1F3C4; FREE_PVAL   # CAROUSEL HORSE..SURFER
1F3C5       ; UNASSIGNED  # <reserved>
1F3C6..1F3CA; FREE_PVAL   # TROPHY..SWIMMER
1F3CB..1F3DF; UNASSIGNED  # <reserved>..<reserved>
1F3E0..1F3F0; FREE_PVAL   # HOUSE BUILDING..EUROPEAN CASTLE
1F3F1..1F3FF; UNASSIGNED  # <reserved>..<reserved>
1F400..1F43E; FREE_PVAL   # RAT..PAW PRINTS
1F43F       ; UNASSIGNED  # <reserved>
1F440       ; FREE_PVAL   # EYES
1F441       ; UNASSIGNED  # <reserved>
1F442..1F4F7; FREE_PVAL   # EAR..CAMERA
1F4F8       ; UNASSIGNED  # <reserved>
1F4F9..1F4FC; FREE_PVAL   # VIDEOCASSETTE
1F4FD..1F4FF; UNASSIGNED  # <reserved>..<reserved>
1F500..1F53D; FREE_PVAL   # TWISTED RIGHTWARDS ARROWS..DOWN-POINTI
1F53E..1F53F; UNASSIGNED  # <reserved>..<reserved>
1F540..1F543; FREE_PVAL   # CIRCLED CROSS POMMEE..NOTCHED LEFT SEM
1F544..1F54F; UNASSIGNED  # <reserved>..<reserved>
1F550..1F567; FREE_PVAL   # CLOCK FACE ONE OCLOCK..CLOCK FACE TWEL
1F568..1F5FA; UNASSIGNED  # <reserved>..<reserved>
1F5FB..1F640; FREE_PVAL   # MOUNT FUJI..WEARY CAT FACE
1F641..1F644; UNASSIGNED  # <reserved>..<reserved>
1F645..1F6C5; FREE_PVAL   # FACE WITH NO GOOD GESTURE..LEFT LUGGAG
1F6C6..1F6FF; UNASSIGNED  # <reserved>..<reserved>
1F700..1F773; FREE_PVAL   # ALCHEMICAL SYMBOL FOR QUINTESSENCE..AL
1F774..1FFFF; UNASSIGNED  # <reserved>..<reserved>
20000..2A6D6; PVALID      # <CJK Ideograph Extension B>..<CJK Ideo
2A6D7..2A6FF; UNASSIGNED  # <reserved>..<reserved>
2A700..2B734; PVALID      # <CJK Ideograph Extension C>..<CJK Ideo
2A735..2A739; UNASSIGNED  # <reserved>..<reserved>
2A740..2B81D; PVALID      # <CJK Ideograph Extension D>..<CJK Ideo
2F800..2FA1D; FREE_PVAL   # CJK COMP IDEO-2F800..CJK COMPA
2FA1E..2FFFD; UNASSIGNED  # <reserved>..<reserved>
2FFFE..2FFFF; DISALLOWED  # <noncharacter>..<noncharacter>
30000..3FFFD; UNASSIGNED  # <reserved>..<reserved>
3FFFE..3FFFF; DISALLOWED  # <noncharacter>..<noncharacter>
40000..4FFFD; UNASSIGNED  # <reserved>..<reserved>
4FFFE..4FFFF; DISALLOWED  # <noncharacter>..<noncharacter>
50000..5FFFD; UNASSIGNED  # <reserved>..<reserved>
5FFFE..5FFFF; DISALLOWED  # <noncharacter>..<noncharacter>
60000..6FFFD; UNASSIGNED  # <reserved>..<reserved>
6FFFE..6FFFF; DISALLOWED  # <noncharacter>..<noncharacter>
70000..7FFFD; UNASSIGNED  # <reserved>..<reserved>
7FFFE..7FFFF; DISALLOWED  # <noncharacter>..<noncharacter>
80000..8FFFD; UNASSIGNED  # <reserved>..<reserved>
8FFFE..8FFFF; DISALLOWED  # <noncharacter>..<noncharacter>
90000..9FFFD; UNASSIGNED  # <reserved>..<reserved>
9FFFE..9FFFF; DISALLOWED  # <noncharacter>..<noncharacter>
A0000..AFFFD; UNASSIGNED  # <reserved>..<reserved>
AFFFE..AFFFF; DISALLOWED  # <noncharacter>..<noncharacter>
B0000..BFFFD; UNASSIGNED  # <reserved>..<reserved>
BFFFE..BFFFF; DISALLOWED  # <noncharacter>..<noncharacter>
C0000..CFFFD; UNASSIGNED  # <reserved>..<reserved>
CFFFE..CFFFF; DISALLOWED  # <noncharacter>..<noncharacter>
D0000..DFFFD; UNASSIGNED  # <reserved>..<reserved>
DFFFE..DFFFF; DISALLOWED  # <noncharacter>..<noncharacter>
E0000       ; UNASSIGNED  # <reserved>
E0001       ; DISALLOWED  # LANGUAGE TAG
E0002..E001F; UNASSIGNED  # <reserved>..<reserved>
E0020..E007F; DISALLOWED  # TAG SPACE..CANCEL TAG
E0080..E00FF; UNASSIGNED  # <reserved>..<reserved>
E0100..E01EF; FREE_PVAL   # VAR SEL-17..VAR SEL-256
E01F0..EFFFD; UNASSIGNED  # <reserved>..<reserved>
EFFFE..10FFFF; DISALLOWED # <noncharacter>..<noncharacter>
      ]]></artwork></figure>
    </section>

    <section title="Acknowledgements">
      <t>The authors would like to acknowledge the comments and contributions of the following individuals: David Black, Mark Davis, Alan DeKok, Martin Duerst, Patrik Faltstrom, Ted Hardie, Joe Hildebrand, Paul Hoffman, Jeffrey Hutzelman, Simon Josefsson, John Klensin, Alexey Melnikov, Takahiro Nemoto, Yoav Nir, Mike Parker, Pete Resnick, Andrew Sullivan, Dave Thaler, and Yoshiro Yoneya.</t>
      <t>Some algorithms and textual descriptions have been borrowed from <xref target='RFC5892'/>.  Some text regarding security has been borrowed from <xref target='RFC5890'/> and <xref target='I-D.ietf-xmpp-6122bis'/>.</t>
    </section>

  </back>
</rfc>
